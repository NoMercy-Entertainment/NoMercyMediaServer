// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoMercy.Database;

#nullable disable

namespace NoMercy.Database.Migrations
{
    [DbContext(typeof(MediaContext))]
    [Migration("20240610164244_Test35")]
    partial class Test35
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("NoMercy.Database.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Cover")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Disambiguation")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("FolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("HostFolder")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("Tracks")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlbumArtist", b =>
                {
                    b.Property<Guid>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("TEXT");

                    b.HasKey("AlbumId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("AlbumArtist");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlbumLibrary", b =>
                {
                    b.Property<Guid>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.HasKey("AlbumId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("AlbumLibrary");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlbumMusicGenre", b =>
                {
                    b.Property<Guid>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MusicGenreId")
                        .HasColumnType("TEXT");

                    b.HasKey("AlbumId", "MusicGenreId");

                    b.HasIndex("MusicGenreId");

                    b.ToTable("AlbumMusicGenre");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlbumReleaseGroup", b =>
                {
                    b.Property<Guid>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReleaseGroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("AlbumId", "ReleaseGroupId");

                    b.HasIndex("ReleaseGroupId");

                    b.ToTable("AlbumReleaseGroup");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlbumTrack", b =>
                {
                    b.Property<Guid>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.HasKey("AlbumId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("AlbumTrack");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlbumUser", b =>
                {
                    b.Property<Guid>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("AlbumId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AlbumUser");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlternativeTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Iso31661")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TvId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("TvId");

                    b.HasIndex("Title", "MovieId")
                        .IsUnique();

                    b.HasIndex("Title", "TvId")
                        .IsUnique();

                    b.ToTable("AlternativeTitles");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Cover")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Disambiguation")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("FolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("HostFolder")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleSort")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Year")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ArtistLibrary", b =>
                {
                    b.Property<Guid>("ArtistId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.HasKey("ArtistId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("ArtistLibrary");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ArtistMusicGenre", b =>
                {
                    b.Property<Guid>("ArtistId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MusicGenreId")
                        .HasColumnType("TEXT");

                    b.HasKey("ArtistId", "MusicGenreId");

                    b.HasIndex("MusicGenreId");

                    b.ToTable("ArtistMusicGenre");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ArtistReleaseGroup", b =>
                {
                    b.Property<Guid>("ArtistId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReleaseGroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("ArtistId", "ReleaseGroupId");

                    b.HasIndex("ReleaseGroupId");

                    b.ToTable("ArtistReleaseGroup");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ArtistTrack", b =>
                {
                    b.Property<Guid>("ArtistId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.HasKey("ArtistId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("ArtistTrack");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ArtistUser", b =>
                {
                    b.Property<Guid>("ArtistId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ArtistId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ArtistUser");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Cast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreditId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TvId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.HasIndex("SeasonId");

                    b.HasIndex("TvId");

                    b.HasIndex("CreditId", "EpisodeId", "RoleId")
                        .IsUnique();

                    b.HasIndex("CreditId", "MovieId", "RoleId")
                        .IsUnique();

                    b.HasIndex("CreditId", "SeasonId", "RoleId")
                        .IsUnique();

                    b.HasIndex("CreditId", "TvId", "RoleId")
                        .IsUnique();

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Iso31661")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rating")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Iso31661", "Rating")
                        .IsUnique();

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("NoMercy.Database.Models.CertificationMovie", b =>
                {
                    b.Property<int>("CertificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CertificationId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("CertificationMovie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.CertificationTv", b =>
                {
                    b.Property<int>("CertificationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TvId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CertificationId", "TvId");

                    b.HasIndex("TvId");

                    b.ToTable("CertificationTv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Collection", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Backdrop")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Overview")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("Parts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Poster")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleSort")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("NoMercy.Database.Models.CollectionLibrary", b =>
                {
                    b.Property<int>("CollectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.HasKey("CollectionId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("CollectionLibrary");
                });

            modelBuilder.Entity("NoMercy.Database.Models.CollectionMovie", b =>
                {
                    b.Property<int>("CollectionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CollectionId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("CollectionMovie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.CollectionUser", b =>
                {
                    b.Property<int>("CollectionId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("CollectionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CollectionUser");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Configuration", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iso31661")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NativeName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Iso31661")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Creator", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TvId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PersonId", "TvId");

                    b.HasIndex("TvId");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Crew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreditId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TvId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TvId");

                    b.HasIndex("CreditId", "EpisodeId", "JobId")
                        .IsUnique();

                    b.HasIndex("CreditId", "MovieId", "JobId")
                        .IsUnique();

                    b.HasIndex("CreditId", "SeasonId", "JobId")
                        .IsUnique();

                    b.HasIndex("CreditId", "TvId", "JobId")
                        .IsUnique();

                    b.ToTable("Crews");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Device", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("Device");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Os")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("NoMercy.Database.Models.EncoderProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Container")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Param")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("EncoderProfiles");
                });

            modelBuilder.Entity("NoMercy.Database.Models.EncoderProfileFolder", b =>
                {
                    b.Property<string>("EncoderProfileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FolderId")
                        .HasColumnType("TEXT");

                    b.HasKey("EncoderProfileId", "FolderId");

                    b.HasIndex("FolderId");

                    b.ToTable("EncoderProfileFolder");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AirDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Overview")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductionCode")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Still")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("TvId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TvdbId")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("VoteAverage")
                        .HasColumnType("REAL");

                    b.Property<int?>("VoteCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TvId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("NoMercy.Database.Models.File", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("NoMercy.Database.Models.FileLibrary", b =>
                {
                    b.Property<string>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.HasKey("FileId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("FileLibrary");
                });

            modelBuilder.Entity("NoMercy.Database.Models.FileMovie", b =>
                {
                    b.Property<string>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FileId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("FileMovie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Folder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("NoMercy.Database.Models.FolderLibrary", b =>
                {
                    b.Property<string>("FolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.HasKey("FolderId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("FolderLibrary");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("NoMercy.Database.Models.GenreMovie", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GenreId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.GenreTv", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TvId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GenreId", "TvId");

                    b.HasIndex("TvId");

                    b.ToTable("GenreTv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.GuestStar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreditId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("CreditId", "EpisodeId")
                        .IsUnique();

                    b.ToTable("GuestStars");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ArtistId")
                        .HasColumnType("TEXT");

                    b.Property<double>("AspectRatio")
                        .HasColumnType("REAL");

                    b.Property<string>("CastCreditId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CastId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CrewCreditId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CrewId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Iso6391")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Site")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TvId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double?>("VoteAverage")
                        .HasColumnType("REAL");

                    b.Property<int?>("VoteCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Width")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CastId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("CrewId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TrackId");

                    b.HasIndex("TvId");

                    b.HasIndex("FilePath", "AlbumId")
                        .IsUnique();

                    b.HasIndex("FilePath", "ArtistId")
                        .IsUnique();

                    b.HasIndex("FilePath", "CastCreditId")
                        .IsUnique();

                    b.HasIndex("FilePath", "CollectionId")
                        .IsUnique();

                    b.HasIndex("FilePath", "CrewCreditId")
                        .IsUnique();

                    b.HasIndex("FilePath", "EpisodeId")
                        .IsUnique();

                    b.HasIndex("FilePath", "MovieId")
                        .IsUnique();

                    b.HasIndex("FilePath", "PersonId")
                        .IsUnique();

                    b.HasIndex("FilePath", "SeasonId")
                        .IsUnique();

                    b.HasIndex("FilePath", "TrackId")
                        .IsUnique();

                    b.HasIndex("FilePath", "TvId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreditId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Task")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreditId")
                        .IsUnique();

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("NoMercy.Database.Models.KeywordMovie", b =>
                {
                    b.Property<int>("KeywordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("KeywordId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("KeywordMovie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.KeywordTv", b =>
                {
                    b.Property<int>("KeywordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TvId")
                        .HasColumnType("INTEGER");

                    b.HasKey("KeywordId", "TvId");

                    b.HasIndex("TvId");

                    b.ToTable("KeywordTv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iso6391")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Iso6391")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("NoMercy.Database.Models.LanguageLibrary", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.HasKey("LanguageId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("LanguageLibrary");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Library", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AutoRefreshInterval")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ChapterImages")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("ExtractChapters")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExtractChaptersDuring")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PerfectSubtitleMatch")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Realtime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialSeasonName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("NoMercy.Database.Models.LibraryMovie", b =>
                {
                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LibraryId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("LibraryMovie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.LibraryTrack", b =>
                {
                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.HasKey("LibraryId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("LibraryTrack");
                });

            modelBuilder.Entity("NoMercy.Database.Models.LibraryTv", b =>
                {
                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TvId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LibraryId", "TvId");

                    b.HasIndex("TvId");

                    b.ToTable("LibraryTv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.LibraryUser", b =>
                {
                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LibraryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LibraryUser");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Media", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Iso6391")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Site")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TvId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("VideoFileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId", "Src")
                        .IsUnique();

                    b.HasIndex("MovieId", "Src")
                        .IsUnique();

                    b.HasIndex("PersonId", "Src")
                        .IsUnique();

                    b.HasIndex("SeasonId", "Src")
                        .IsUnique();

                    b.HasIndex("TvId", "Src")
                        .IsUnique();

                    b.HasIndex("VideoFileId", "Src")
                        .IsUnique();

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("NoMercy.Database.Models.MediaAttachment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MediaAttachments");
                });

            modelBuilder.Entity("NoMercy.Database.Models.MediaStream", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MediaStreams");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Metadata", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Adult")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Backdrop")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Budget")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Folder")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Homepage")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalTitle")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Overview")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<double?>("Popularity")
                        .HasColumnType("REAL");

                    b.Property<string>("Poster")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Revenue")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Runtime")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Show")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tagline")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleSort")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Trailer")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Video")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<double?>("VoteAverage")
                        .HasColumnType("REAL");

                    b.Property<int?>("VoteCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("NoMercy.Database.Models.MovieUser", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieUser");
                });

            modelBuilder.Entity("NoMercy.Database.Models.MusicGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MusicGenres");
                });

            modelBuilder.Entity("NoMercy.Database.Models.MusicGenreReleaseGroup", b =>
                {
                    b.Property<Guid>("GenreId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReleaseGroupId")
                        .HasColumnType("TEXT");

                    b.HasKey("GenreId", "ReleaseGroupId");

                    b.HasIndex("ReleaseGroupId");

                    b.ToTable("MusicGenreReleaseGroup");
                });

            modelBuilder.Entity("NoMercy.Database.Models.MusicGenreTrack", b =>
                {
                    b.Property<Guid>("GenreId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.HasKey("GenreId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("MusicGenreTrack");
                });

            modelBuilder.Entity("NoMercy.Database.Models.MusicPlay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserId");

                    b.ToTable("MusicPlays");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NoMercy.Database.Models.NotificationUser", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("NotificationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationUser");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Adult")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlsoKnownAs")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Biography")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeathDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("Homepage")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownForDepartment")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<double>("Popularity")
                        .HasColumnType("REAL");

                    b.Property<string>("Profile")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleSort")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.Property<string>("_externalIds")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ExternalIds");

                    b.Property<int>("_gender")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Gender");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Playlist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cover")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("NoMercy.Database.Models.PlaylistTrack", b =>
                {
                    b.Property<string>("PlaylistId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.HasKey("PlaylistId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("NoMercy.Database.Models.PriorityProvider", b =>
                {
                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Priority", "Country", "ProviderId");

                    b.HasIndex("ProviderId");

                    b.ToTable("PriorityProvider");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Provider", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Backdrop")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MovieFromId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MovieToId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Overview")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Poster")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleSort")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TvFromId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TvToId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("MovieFromId");

                    b.HasIndex("MovieToId");

                    b.HasIndex("TvFromId");

                    b.HasIndex("TvToId");

                    b.HasIndex("MediaId", "MovieFromId")
                        .IsUnique();

                    b.HasIndex("MediaId", "TvFromId")
                        .IsUnique();

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ReleaseGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cover")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Disambiguation")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("LibraryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("ReleaseGroups");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Character")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("EpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GuestStarId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreditId")
                        .IsUnique();

                    b.HasIndex("GuestStarId")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NoMercy.Database.Models.RunningTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RunningTasks");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AirDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Overview")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Poster")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("TvId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("TvId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Similar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Backdrop")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MovieFromId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MovieToId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Overview")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Poster")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleSort")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TvFromId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TvToId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("MovieFromId");

                    b.HasIndex("MovieToId");

                    b.HasIndex("TvFromId");

                    b.HasIndex("TvToId");

                    b.HasIndex("MediaId", "MovieFromId")
                        .IsUnique();

                    b.HasIndex("MediaId", "TvFromId")
                        .IsUnique();

                    b.ToTable("Similar");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Special", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Backdrop")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Creator")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Overview")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Poster")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleSort")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.ToTable("Specials");
                });

            modelBuilder.Entity("NoMercy.Database.Models.SpecialItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("MovieId");

                    b.HasIndex("SpecialId", "EpisodeId")
                        .IsUnique();

                    b.HasIndex("SpecialId", "MovieId")
                        .IsUnique();

                    b.ToTable("SpecialItems");
                });

            modelBuilder.Entity("NoMercy.Database.Models.SpecialUser", b =>
                {
                    b.Property<string>("SpecialId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("SpecialId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SpecialUser");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cover")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DiscNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Duration")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("FolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("HostFolder")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Quality")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.Property<string>("_lyrics")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("Lyrics");

                    b.HasKey("Id");

                    b.HasIndex("Folder");

                    b.HasIndex("FolderId");

                    b.HasIndex("Filename", "HostFolder")
                        .IsUnique();

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("NoMercy.Database.Models.TrackUser", b =>
                {
                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("TrackId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TrackUser");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ArtistId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Biography")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Homepage")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iso31661")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iso6391")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Overview")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ReleaseGroupId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TvId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId", "Iso31661")
                        .IsUnique();

                    b.HasIndex("ArtistId", "Iso31661")
                        .IsUnique();

                    b.HasIndex("ReleaseGroupId", "Iso31661")
                        .IsUnique();

                    b.HasIndex("CollectionId", "Iso6391", "Iso31661")
                        .IsUnique();

                    b.HasIndex("EpisodeId", "Iso6391", "Iso31661")
                        .IsUnique();

                    b.HasIndex("MovieId", "Iso6391", "Iso31661")
                        .IsUnique();

                    b.HasIndex("PersonId", "Iso6391", "Iso31661")
                        .IsUnique();

                    b.HasIndex("SeasonId", "Iso6391", "Iso31661")
                        .IsUnique();

                    b.HasIndex("TvId", "Iso6391", "Iso31661")
                        .IsUnique();

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Tv", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Backdrop")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FirstAirDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("HaveEpisodes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Homepage")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("InProduction")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LastEpisodeToAir")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LibraryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaType")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("NextEpisodeToAir")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfEpisodes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumberOfSeasons")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginCountry")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Overview")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<double?>("Popularity")
                        .HasColumnType("REAL");

                    b.Property<string>("Poster")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("SpokenLanguages")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tagline")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleSort")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Trailer")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TvdbId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double?>("VoteAverage")
                        .HasColumnType("REAL");

                    b.Property<int?>("VoteCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_colorPalette")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorPalette");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Tvs");
                });

            modelBuilder.Entity("NoMercy.Database.Models.TvUser", b =>
                {
                    b.Property<int>("TvId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("TvId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TvUser");
                });

            modelBuilder.Entity("NoMercy.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Allowed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AudioTranscoding")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Manage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("NoTranscoding")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Owner")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("VideoTranscoding")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NoMercy.Database.Models.UserData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Audio")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("LastPlayedDate")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialItemId")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubtitleType")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Time")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TvId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoFileId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("MovieId");

                    b.HasIndex("SpecialId");

                    b.HasIndex("SpecialItemId");

                    b.HasIndex("TvId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoFileId", "UserId")
                        .IsUnique();

                    b.ToTable("UserData");
                });

            modelBuilder.Entity("NoMercy.Database.Models.VideoFile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Chapters")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Duration")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("HostFolder")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Share")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subtitles")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("Filename")
                        .IsUnique();

                    b.HasIndex("MovieId");

                    b.ToTable("VideoFiles");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ActivityLog", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Device", "Device")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Album", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Folder", "LibraryFolder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Library");

                    b.Navigation("LibraryFolder");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlbumArtist", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Album", "Album")
                        .WithMany("AlbumArtist")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Artist", "Artist")
                        .WithMany("AlbumArtist")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlbumLibrary", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany("AlbumLibraries")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlbumMusicGenre", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Album", "Album")
                        .WithMany("AlbumMusicGenre")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.MusicGenre", "MusicGenre")
                        .WithMany()
                        .HasForeignKey("MusicGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("MusicGenre");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlbumReleaseGroup", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Album", "Album")
                        .WithMany("AlbumReleaseGroup")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.ReleaseGroup", "ReleaseGroup")
                        .WithMany("AlbumReleaseGroup")
                        .HasForeignKey("ReleaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("ReleaseGroup");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlbumTrack", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Album", "Album")
                        .WithMany("AlbumTrack")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Track", "Track")
                        .WithMany("AlbumTrack")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlbumUser", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Album", "Album")
                        .WithMany("AlbumUser")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany("AlbumUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoMercy.Database.Models.AlternativeTitle", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany("AlternativeTitles")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("AlternativeTitles")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Movie");

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Artist", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Folder", "LibraryFolder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Library");

                    b.Navigation("LibraryFolder");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ArtistLibrary", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany("ArtistLibraries")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ArtistMusicGenre", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Artist", "Artist")
                        .WithMany("ArtistMusicGenre")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.MusicGenre", "MusicGenre")
                        .WithMany()
                        .HasForeignKey("MusicGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("MusicGenre");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ArtistReleaseGroup", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Artist", "Artist")
                        .WithMany("ArtistReleaseGroup")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.ReleaseGroup", "ReleaseGroup")
                        .WithMany("ArtistReleaseGroup")
                        .HasForeignKey("ReleaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("ReleaseGroup");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ArtistTrack", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Artist", "Artist")
                        .WithMany("ArtistTrack")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Track", "Track")
                        .WithMany("ArtistTrack")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ArtistUser", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Artist", "Artist")
                        .WithMany("ArtistUser")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany("ArtistUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Cast", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Episode", "Episode")
                        .WithMany("Cast")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Person", "Person")
                        .WithMany("Casts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Role", "Role")
                        .WithOne("Cast")
                        .HasForeignKey("NoMercy.Database.Models.Cast", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Season", "Season")
                        .WithMany("Cast")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("Cast")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Episode");

                    b.Navigation("Movie");

                    b.Navigation("Person");

                    b.Navigation("Role");

                    b.Navigation("Season");

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.CertificationMovie", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany("CertificationMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.CertificationTv", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("CertificationTvs")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Collection", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("NoMercy.Database.Models.CollectionLibrary", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany("CollectionLibraries")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("NoMercy.Database.Models.CollectionMovie", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Collection", "Collection")
                        .WithMany("CollectionMovies")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.CollectionUser", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Collection", "Collection")
                        .WithMany("CollectionUser")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany("CollectionUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Creator", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("Creators")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Crew", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Episode", "Episode")
                        .WithMany("Crew")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Job", "Job")
                        .WithOne("Crew")
                        .HasForeignKey("NoMercy.Database.Models.Crew", "JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany("Crew")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Person", "Person")
                        .WithMany("Crews")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Season", "Season")
                        .WithMany("Crew")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("Crew")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Episode");

                    b.Navigation("Job");

                    b.Navigation("Movie");

                    b.Navigation("Person");

                    b.Navigation("Season");

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.EncoderProfileFolder", b =>
                {
                    b.HasOne("NoMercy.Database.Models.EncoderProfile", "EncoderProfile")
                        .WithMany("EncoderProfileFolder")
                        .HasForeignKey("EncoderProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Folder", "Folder")
                        .WithMany("EncoderProfileFolder")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EncoderProfile");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Episode", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("Episodes")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.File", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Episode", null)
                        .WithMany("Files")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NoMercy.Database.Models.FileLibrary", b =>
                {
                    b.HasOne("NoMercy.Database.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany("FileLibraries")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("NoMercy.Database.Models.FileMovie", b =>
                {
                    b.HasOne("NoMercy.Database.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.FolderLibrary", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany("FolderLibraries")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("NoMercy.Database.Models.GenreMovie", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Genre", "Genre")
                        .WithMany("GenreMovies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany("GenreMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.GenreTv", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Genre", "Genre")
                        .WithMany("GenreTvShows")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("GenreTvs")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.GuestStar", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Episode", "Episode")
                        .WithMany("GuestStars")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Image", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Album", "Album")
                        .WithMany("Images")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Artist", "Artist")
                        .WithMany("Images")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Cast", "Cast")
                        .WithMany()
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Collection", "Collection")
                        .WithMany("Images")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Crew", "Crew")
                        .WithMany()
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Episode", "Episode")
                        .WithMany("Images")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany("Images")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Person", "Person")
                        .WithMany("Images")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Season", "Season")
                        .WithMany("Images")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Track", "Track")
                        .WithMany("Images")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("Images")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Album");

                    b.Navigation("Artist");

                    b.Navigation("Cast");

                    b.Navigation("Collection");

                    b.Navigation("Crew");

                    b.Navigation("Episode");

                    b.Navigation("Movie");

                    b.Navigation("Person");

                    b.Navigation("Season");

                    b.Navigation("Track");

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.KeywordMovie", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Keyword", "Keyword")
                        .WithMany()
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany("KeywordMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.KeywordTv", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Keyword", "Keyword")
                        .WithMany()
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("KeywordTvs")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.LanguageLibrary", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Language", "Language")
                        .WithMany("LanguageLibrary")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany("LanguageLibraries")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("NoMercy.Database.Models.LibraryMovie", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany("LibraryMovies")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.LibraryTrack", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany("LibraryTracks")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Track", "Track")
                        .WithMany("LibraryTrack")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("NoMercy.Database.Models.LibraryTv", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany("LibraryTvs")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany()
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.LibraryUser", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany("LibraryUsers")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany("LibraryUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Media", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Episode", "Episode")
                        .WithMany("Media")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany("Media")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Season", "Season")
                        .WithMany("Medias")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("Media")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.VideoFile", "VideoFile")
                        .WithMany()
                        .HasForeignKey("VideoFileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Episode");

                    b.Navigation("Movie");

                    b.Navigation("Person");

                    b.Navigation("Season");

                    b.Navigation("Tv");

                    b.Navigation("VideoFile");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Movie", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("NoMercy.Database.Models.MovieUser", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany("MovieUser")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany("MovieUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoMercy.Database.Models.MusicGenreReleaseGroup", b =>
                {
                    b.HasOne("NoMercy.Database.Models.MusicGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.ReleaseGroup", "ReleaseGroup")
                        .WithMany()
                        .HasForeignKey("ReleaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("ReleaseGroup");
                });

            modelBuilder.Entity("NoMercy.Database.Models.MusicGenreTrack", b =>
                {
                    b.HasOne("NoMercy.Database.Models.MusicGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Track", "Track")
                        .WithMany("MusicGenreTrack")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("NoMercy.Database.Models.MusicPlay", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Track", "Track")
                        .WithMany("MusicPlays")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoMercy.Database.Models.NotificationUser", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany("NotificationUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Playlist", b =>
                {
                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoMercy.Database.Models.PlaylistTrack", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Playlist", "Playlist")
                        .WithMany("Tracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.Track", "Track")
                        .WithMany("PlaylistTrack")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("NoMercy.Database.Models.PriorityProvider", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Recommendation", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Movie", "MovieFrom")
                        .WithMany("RecommendationFrom")
                        .HasForeignKey("MovieFromId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Movie", "MovieTo")
                        .WithMany("RecommendationTo")
                        .HasForeignKey("MovieToId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Tv", "TvFrom")
                        .WithMany("RecommendationFrom")
                        .HasForeignKey("TvFromId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Tv", "TvTo")
                        .WithMany("RecommendationTo")
                        .HasForeignKey("TvToId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MovieFrom");

                    b.Navigation("MovieTo");

                    b.Navigation("TvFrom");

                    b.Navigation("TvTo");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ReleaseGroup", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Library");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Role", b =>
                {
                    b.HasOne("NoMercy.Database.Models.GuestStar", "GuestStar")
                        .WithMany()
                        .HasForeignKey("GuestStarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GuestStar");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Season", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Movie", null)
                        .WithMany("Seasons")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("Seasons")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Similar", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Movie", "MovieFrom")
                        .WithMany("SimilarFrom")
                        .HasForeignKey("MovieFromId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Movie", "MovieTo")
                        .WithMany("SimilarTo")
                        .HasForeignKey("MovieToId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Tv", "TvFrom")
                        .WithMany("SimilarFrom")
                        .HasForeignKey("TvFromId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Tv", "TvTo")
                        .WithMany("SimilarTo")
                        .HasForeignKey("TvToId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MovieFrom");

                    b.Navigation("MovieTo");

                    b.Navigation("TvFrom");

                    b.Navigation("TvTo");
                });

            modelBuilder.Entity("NoMercy.Database.Models.SpecialItem", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Episode", "Episode")
                        .WithMany("SpecialItems")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Special", "Special")
                        .WithMany("Items")
                        .HasForeignKey("SpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Movie");

                    b.Navigation("Special");
                });

            modelBuilder.Entity("NoMercy.Database.Models.SpecialUser", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Special", "Special")
                        .WithMany("SpecialUser")
                        .HasForeignKey("SpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany("SpecialUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Special");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Track", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Folder", "LibraryFolder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LibraryFolder");
                });

            modelBuilder.Entity("NoMercy.Database.Models.TrackUser", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Track", "Track")
                        .WithMany("TrackUser")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany("TrackUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Translation", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Album", "Album")
                        .WithMany("Translations")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Artist", "Artist")
                        .WithMany("Translations")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Collection", "Collection")
                        .WithMany("Translations")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Episode", "Episode")
                        .WithMany("Translations")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany("Translations")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Person", "People")
                        .WithMany("Translations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.ReleaseGroup", "ReleaseGroup")
                        .WithMany("Translations")
                        .HasForeignKey("ReleaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Season", "Season")
                        .WithMany("Translations")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("Translations")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Album");

                    b.Navigation("Artist");

                    b.Navigation("Collection");

                    b.Navigation("Episode");

                    b.Navigation("Movie");

                    b.Navigation("People");

                    b.Navigation("ReleaseGroup");

                    b.Navigation("Season");

                    b.Navigation("Tv");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Tv", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Library", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("NoMercy.Database.Models.TvUser", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("TvUser")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany("TvUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tv");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoMercy.Database.Models.UserData", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Collection", "Collection")
                        .WithMany("UserData")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany("UserData")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Special", "Special")
                        .WithMany()
                        .HasForeignKey("SpecialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.SpecialItem", null)
                        .WithMany("UserData")
                        .HasForeignKey("SpecialItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Tv", "Tv")
                        .WithMany("UserData")
                        .HasForeignKey("TvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoMercy.Database.Models.VideoFile", "VideoFile")
                        .WithMany("UserData")
                        .HasForeignKey("VideoFileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Collection");

                    b.Navigation("Movie");

                    b.Navigation("Special");

                    b.Navigation("Tv");

                    b.Navigation("User");

                    b.Navigation("VideoFile");
                });

            modelBuilder.Entity("NoMercy.Database.Models.VideoFile", b =>
                {
                    b.HasOne("NoMercy.Database.Models.Episode", "Episode")
                        .WithMany("VideoFiles")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NoMercy.Database.Models.Movie", "Movie")
                        .WithMany("VideoFiles")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Episode");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Album", b =>
                {
                    b.Navigation("AlbumArtist");

                    b.Navigation("AlbumMusicGenre");

                    b.Navigation("AlbumReleaseGroup");

                    b.Navigation("AlbumTrack");

                    b.Navigation("AlbumUser");

                    b.Navigation("Images");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Artist", b =>
                {
                    b.Navigation("AlbumArtist");

                    b.Navigation("ArtistMusicGenre");

                    b.Navigation("ArtistReleaseGroup");

                    b.Navigation("ArtistTrack");

                    b.Navigation("ArtistUser");

                    b.Navigation("Images");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Collection", b =>
                {
                    b.Navigation("CollectionMovies");

                    b.Navigation("CollectionUser");

                    b.Navigation("Images");

                    b.Navigation("Translations");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Device", b =>
                {
                    b.Navigation("ActivityLogs");
                });

            modelBuilder.Entity("NoMercy.Database.Models.EncoderProfile", b =>
                {
                    b.Navigation("EncoderProfileFolder");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Episode", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("Files");

                    b.Navigation("GuestStars");

                    b.Navigation("Images");

                    b.Navigation("Media");

                    b.Navigation("SpecialItems");

                    b.Navigation("Translations");

                    b.Navigation("VideoFiles");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Folder", b =>
                {
                    b.Navigation("EncoderProfileFolder");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Genre", b =>
                {
                    b.Navigation("GenreMovies");

                    b.Navigation("GenreTvShows");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Job", b =>
                {
                    b.Navigation("Crew");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Language", b =>
                {
                    b.Navigation("LanguageLibrary");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Library", b =>
                {
                    b.Navigation("AlbumLibraries");

                    b.Navigation("ArtistLibraries");

                    b.Navigation("CollectionLibraries");

                    b.Navigation("FileLibraries");

                    b.Navigation("FolderLibraries");

                    b.Navigation("LanguageLibraries");

                    b.Navigation("LibraryMovies");

                    b.Navigation("LibraryTracks");

                    b.Navigation("LibraryTvs");

                    b.Navigation("LibraryUsers");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Movie", b =>
                {
                    b.Navigation("AlternativeTitles");

                    b.Navigation("Cast");

                    b.Navigation("CertificationMovies");

                    b.Navigation("Crew");

                    b.Navigation("GenreMovies");

                    b.Navigation("Images");

                    b.Navigation("KeywordMovies");

                    b.Navigation("Media");

                    b.Navigation("MovieUser");

                    b.Navigation("RecommendationFrom");

                    b.Navigation("RecommendationTo");

                    b.Navigation("Seasons");

                    b.Navigation("SimilarFrom");

                    b.Navigation("SimilarTo");

                    b.Navigation("Translations");

                    b.Navigation("UserData");

                    b.Navigation("VideoFiles");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Person", b =>
                {
                    b.Navigation("Casts");

                    b.Navigation("Crews");

                    b.Navigation("Images");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Playlist", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("NoMercy.Database.Models.ReleaseGroup", b =>
                {
                    b.Navigation("AlbumReleaseGroup");

                    b.Navigation("ArtistReleaseGroup");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Role", b =>
                {
                    b.Navigation("Cast");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Season", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("Episodes");

                    b.Navigation("Images");

                    b.Navigation("Medias");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Special", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SpecialUser");
                });

            modelBuilder.Entity("NoMercy.Database.Models.SpecialItem", b =>
                {
                    b.Navigation("UserData");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Track", b =>
                {
                    b.Navigation("AlbumTrack");

                    b.Navigation("ArtistTrack");

                    b.Navigation("Images");

                    b.Navigation("LibraryTrack");

                    b.Navigation("MusicGenreTrack");

                    b.Navigation("MusicPlays");

                    b.Navigation("PlaylistTrack");

                    b.Navigation("TrackUser");
                });

            modelBuilder.Entity("NoMercy.Database.Models.Tv", b =>
                {
                    b.Navigation("AlternativeTitles");

                    b.Navigation("Cast");

                    b.Navigation("CertificationTvs");

                    b.Navigation("Creators");

                    b.Navigation("Crew");

                    b.Navigation("Episodes");

                    b.Navigation("GenreTvs");

                    b.Navigation("Images");

                    b.Navigation("KeywordTvs");

                    b.Navigation("Media");

                    b.Navigation("RecommendationFrom");

                    b.Navigation("RecommendationTo");

                    b.Navigation("Seasons");

                    b.Navigation("SimilarFrom");

                    b.Navigation("SimilarTo");

                    b.Navigation("Translations");

                    b.Navigation("TvUser");

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("NoMercy.Database.Models.User", b =>
                {
                    b.Navigation("AlbumUser");

                    b.Navigation("ArtistUser");

                    b.Navigation("CollectionUser");

                    b.Navigation("LibraryUser");

                    b.Navigation("MovieUser");

                    b.Navigation("NotificationUser");

                    b.Navigation("SpecialUser");

                    b.Navigation("TrackUser");

                    b.Navigation("TvUser");
                });

            modelBuilder.Entity("NoMercy.Database.Models.VideoFile", b =>
                {
                    b.Navigation("UserData");
                });
#pragma warning restore 612, 618
        }
    }
}
