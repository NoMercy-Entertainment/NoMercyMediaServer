name: Test and Create Pull Request to Master

on:
  push:
    paths:
      - 'src/**'
      - 'tests/**'
    branches:
      - dev
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
    branches:
      - dev
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  test_and_create_pr:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Setup .NET SDK for the NoMercy.Server project
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"
          
      # Restore dependencies for the NoMercy.Server project
      - name: Restore dependencies
        run: dotnet restore NoMercy.Server.sln

      # Run tests
      - name: Test
        run: >
          dotnet test NoMercy.Server.sln 
          --configuration Release
          --runtime linux-x64
          --collect:"XPlat Code Coverage"
          --settings tests/coverletArgs.runsettings
          --verbosity minimal

      - name: Bump version
        id: bump-version
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
          
          echo "LATEST_TAG=$LATEST_TAG" 

          # Extract components
          MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
          PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)

          # Validate components
          echo "MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"

          # Increment patch version
          NEW_PATCH=$(($PATCH + 1))
          NEW_VERSION=$MAJOR.$MINOR.$NEW_PATCH 
          
          echo "New version will be: $NEW_VERSION"
        
          sed -i "s|<Version>.*</Version>|<Version>${NEW_VERSION}</Version>|" src/NoMercy.Server/NoMercy.Server.csproj

          git add src/NoMercy.Server/NoMercy.Server.csproj
          git commit -m "Update version to ${NEW_VERSION}"

          git push origin dev

      # Directly merge from dev to master
      - name: Merge Dev into Master
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            
            git fetch origin
            git checkout master
            git pull --rebase origin master
            
            git merge origin/dev --no-edit --allow-unrelated-histories -X theirs
            git push origin master
            
            # Rebase dev branch
            git checkout dev
            git rebase master
            git push --force-with-lease origin dev