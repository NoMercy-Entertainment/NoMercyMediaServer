name: Package Repository

on:
  release:
    types: [published]
  workflow_run:
    workflows: ["Build Executables"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read

jobs:
  build_packages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Setup .NET SDK for the NoMercy.Server project
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Build NoMercy.Server
        run: |
          mkdir -p ./output
          dotnet publish ./src/NoMercy.Server/NoMercy.Server.csproj \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyMediaServer \
            --output ./output
          chmod +x ./output/NoMercyMediaServer

      - name: Build NoMercy.Updater
        run: |
          mkdir -p ./output
          dotnet publish ./src/NoMercy.Updater/NoMercy.Updater.csproj \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyUpdater \
            --output ./output
          chmod +x ./output/NoMercyUpdater

      - name: Pull App Files
        uses: actions/checkout@v4
        with:
          repository: NoMercy-Entertainment/NoMercyApp
          path: ./src/NoMercy.App/wwwroot
          fetch-depth: 0
          ref: gh-pages

      - name: Build NoMercy.App
        run: |
          mkdir -p ./output
          dotnet publish ./src/NoMercy.App/NoMercy.App.csproj \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyApp \
            --output ./output
          chmod +x ./output/NoMercyApp

      - name: Get Version
        uses: kzrnm/get-net-sdk-project-versions-action@v2
        id: get-version
        with:
          proj-path: ./src/NoMercy.Server/NoMercy.Server.csproj

      - name: Install Package Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm createrepo-c dpkg-dev devscripts fakeroot build-essential binutils autoconf automake libtool pkg-config gnupg

      - name: Install Arch Build Dependencies
        run: |
          sudo apt -q -y install --no-install-recommends \
            git pkg-config meson gcc libtool libgpgme-dev libarchive-dev ninja-build \
            libcurl4-openssl-dev libssl-dev curl gettext python3 python3-setuptools \
            dash gawk ca-certificates fakeroot fakechroot libarchive-tools

          # Need a more recent version of Meson
          sudo mkdir -p /usr/local/meson
          sudo git clone --depth 1 https://github.com/mesonbuild/meson.git /usr/local/meson

          # Backup existing meson if present
          if [ -f /usr/bin/meson ]; then
            mver=$(meson --version)
            sudo mv /usr/bin/meson "/usr/bin/meson-${mver}"
          fi

          # Create symlink to new meson
          if [ -f /usr/local/meson/meson.py ]; then
            sudo ln -sf /usr/local/meson/meson.py /usr/bin/meson
          else
            echo "ERROR: cannot locate /usr/local/meson/meson.py"
            exit 1
          fi
          
          sudo rm -rf pacman
          git clone https://gitlab.archlinux.org/pacman/pacman.git
          cd pacman
          meson setup -Ddoc=disabled build
          ninja -C build
        
          [ -d build ] || {
          echo "Directory pacman/build does not exist. Exiting."
          exit 1
          }
          cd build
          grep mirror scripts/libmakepkg/source/git.sh > /dev/null && {
          cat scripts/libmakepkg/source/git.sh | sed -e "s/---mirror//" > /tmp/git$$
          cp /tmp/git$$ scripts/libmakepkg/source/git.sh
          rm -f /tmp/git$$
          }
        
          sudo meson install --no-rebuild --quiet

      - name: Setup Package Directories
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          mkdir -p packages/{apt,rpm,arch,debian,redhat}
          mkdir -p packages/apt/pool/main/n/nomercymediaserver
          mkdir -p packages/apt/dists/stable/main/binary-amd64
          mkdir -p packages/debian/dists/stable/main/binary-amd64
          mkdir -p packages/rpm/pool/x86_64
          mkdir -p packages/rpm/repodata
          mkdir -p packages/redhat/repodata
          mkdir -p packages/arch/pool/x86_64

      - name: Generate APT Repository Metadata and Sign
        run: |
          # Create necessary directories
          mkdir -p packages/apt/dists/stable/main/binary-amd64

          # Generate Packages file
          cd packages/apt
          dpkg-scanpackages --arch amd64 pool/ > dists/stable/main/binary-amd64/Packages
          gzip -k dists/stable/main/binary-amd64/Packages

          # Generate Release file
          cd dists/stable
          cat > Release << EOF
          Origin: NoMercy Entertainment
          Label: NoMercy
          Suite: stable
          Codename: stable
          Version: 1.0
          Architectures: amd64
          Components: main
          Date: $(date -u '+%a, %d %b %Y %H:%M:%S UTC')
          SHA256:
          EOF

          # Add hashes to Release file
          for file in $(find main -type f); do
            size=$(wc -c < "$file")
            sha256=$(sha256sum "$file" | cut -d' ' -f1)
            echo " $sha256 $size $file" >> Release
          done

          # Import GPG private key with proper error handling
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import --allow-secret-key-import
          if [ $? -ne 0 ]; then
            echo "Failed to import GPG key"
            exit 1
          fi

          # Sign the Release file
          gpg --batch --yes --detach-sign --armor -o Release.gpg Release

          # Create InRelease file
          gpg --batch --yes --clearsign -o InRelease Release

          cd ../../..

      - name: Build DEB Packages
        run: |
          VERSION=${{ steps.get-version.outputs.version }}

          # Function to create DEB package
          create_deb_package() {
            local name=$1
            local friendly_name=$2
            local bin_path=$3
            local desktop_file=$4
            local PACKAGE_ROOT="./packages/debian-${name}"

            mkdir -p "${PACKAGE_ROOT}/DEBIAN"
            mkdir -p "${PACKAGE_ROOT}/usr/bin"
            mkdir -p "${PACKAGE_ROOT}/usr/share/applications"
            mkdir -p "${PACKAGE_ROOT}/usr/share/icons/hicolor/scalable/apps"

            # Copy files
            cp "${bin_path}" "${PACKAGE_ROOT}/usr/bin/${name}"
            cp "./src/NoMercy.Server/Assets/Linux/${desktop_file}" "${PACKAGE_ROOT}/usr/share/applications/"
            cp "./src/NoMercy.Server/Assets/Linux/icon.png" "${PACKAGE_ROOT}/usr/share/icons/hicolor/scalable/apps/${friendly_name}.png"

            # Create control file
            cat > "${PACKAGE_ROOT}/DEBIAN/control" << 'EOF'
            Package: ${name}
            Version: ${VERSION}
            Architecture: amd64
            Maintainer: NoMercy Entertainment <support@nomercy.tv>
            Description: ${friendly_name}
            Depends: libc6
            Priority: optional
            Section: multimedia
            EOF
            
            # Build package
            dpkg-deb --build "${PACKAGE_ROOT}"
            mv "${PACKAGE_ROOT}.deb" "./packages/apt/pool/main/n/${name}/${name}_${VERSION}_amd64.deb"
            
            # Create symlink
            cd "./packages/apt/pool/main/n/${name}"
            ln -sf "${name}_${VERSION}_amd64.deb" "${name}_latest_amd64.deb"
            cd -
          }
            
          # Create package directories
          mkdir -p packages/apt/pool/main/n/{nomercymediaserver,nomercyupdater,nomercyapp}
          
          # Build packages
          create_deb_package "nomercymediaserver" "NoMercy-MediaServer" "./output/NoMercyMediaServer" "NoMercy-MediaServer.desktop"
          create_deb_package "nomercyupdater" "NoMercy-Updater" "./output/NoMercyUpdater" "NoMercy-Updater.desktop"
          create_deb_package "nomercyapp" "NoMercy-App" "./output/NoMercyApp" "NoMercy-App.desktop"

          cd ../../..

      - name: Build RPM Packages and Sign Repository
        run: |
          VERSION=${{ steps.get-version.outputs.version }}

          # Setup RPM build environment
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

          # Function to create RPM package
          create_rpm_package() {
            local name=$1
            local friendly_name=$2
            local bin_path=$3
            local desktop_file=$4

            # Copy source files
            cp "${bin_path}" ~/rpmbuild/SOURCES/"${name}"
            cp "./src/NoMercy.Server/Assets/Linux/${desktop_file}" ~/rpmbuild/SOURCES/
            cp "./src/NoMercy.Server/Assets/Linux/icon.png" ~/rpmbuild/SOURCES/

            cat > ~/rpmbuild/SPECS/"${name}".spec << EOF
            Name: ${name}
            Version: ${VERSION}
            Release: 1%{?dist}
            Summary: ${friendly_name}
            License: Proprietary
            URL: https://nomercy.tv
            BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
      
            %description
            Modern Media Server Solution
      
            %install
            mkdir -p %{buildroot}/usr/bin
            mkdir -p %{buildroot}/usr/share/applications
            mkdir -p %{buildroot}/usr/share/icons/hicolor/scalable/apps
            cp %{_sourcedir}/${name} %{buildroot}/usr/bin/
            cp %{_sourcedir}/${desktop_file} %{buildroot}/usr/share/applications/
            cp %{_sourcedir}/icon.png %{buildroot}/usr/share/icons/hicolor/scalable/apps/${friendly_name}.png
            chmod 755 %{buildroot}/usr/bin/${name}
      
            %files
            %attr(755,root,root) /usr/bin/${name}
            %attr(644,root,root) /usr/share/applications/${desktop_file}
            %attr(644,root,root) /usr/share/icons/hicolor/scalable/apps/${friendly_name}.png
      
            %clean
            rm -rf %{buildroot}
      
            %changelog
            * $(date '+%a %b %d %Y') NoMercy <support@nomercy.tv> - ${VERSION}-1
            - Initial package
            EOF
            
            # Build RPM package
            rpmbuild -bb ~/rpmbuild/SPECS/"${name}".spec
            
            # Move and create symlink
            mv ~/rpmbuild/RPMS/x86_64/"${name}-${VERSION}-1.x86_64.rpm" packages/rpm/pool/x86_64/
            cd packages/rpm/pool/x86_64
            ln -sf "${name}-${VERSION}-1.x86_64.rpm" "${name}-latest.x86_64.rpm"
            cd -
          }
            
          # Build packages
          create_rpm_package "nomercymediaserver" "NoMercy-MediaServer" "./output/NoMercyMediaServer" "NoMercy-MediaServer.desktop"
          create_rpm_package "nomercyupdater" "NoMercy-Updater" "./output/NoMercyUpdater" "NoMercy-Updater.desktop"
          create_rpm_package "nomercyapp" "NoMercy-App" "./output/NoMercyApp" "NoMercy-App.desktop"
          
          # Generate repo metadata
          createrepo_c packages/rpm
          
          # Import GPG private key for RPM signing
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          
          # Sign the repository metadata
          cd packages/rpm
          gpg --armor --detach-sig -o repodata/repomd.xml.asc repodata/repomd.xml
          cd ../../..

      - name: Build Arch Packages and Sign Database
        run: |
          VERSION=${{ steps.get-version.outputs.version }}

          # Function to create Arch package
          create_arch_package() {
            local name=$1
            local friendly_name=$2
            local bin_path=$3
            local desktop_file=<span class="math-inline">4
            local PACKAGE\_ROOT\=\./packages/arch-</span>{name}
            mkdir -p <span class="math-inline">PACKAGE\_ROOT/pkg/</span>{name}/usr/{bin,share/{applications,icons/hicolor/scalable/apps}}

            # Copy files directly to package structure
            cp ${bin_path} <span class="math-inline">PACKAGE\_ROOT/pkg/</span>{name}/usr/bin/<span class="math-inline">\{name\}
            cp \./src/NoMercy\.Server/Assets/Linux/</span>{desktop_file} <span class="math-inline">PACKAGE\_ROOT/pkg/</span>{name}/usr/share/applications/
            cp ./src/NoMercy.Server/Assets/Linux/icon.png <span class="math-inline">PACKAGE\_ROOT/pkg/</span>{name}/usr/share/icons/hicolor/scalable/apps/${friendly_name}.png

            # Create .PKGINFO
            cat > <span class="math-inline">PACKAGE\_ROOT/pkg/</span>{name}/.PKGINFO << EOF
            pkgname = ${name}
            pkgver = ${VERSION}-1
            pkgdesc = ${friendly_name}
            url = https://nomercy.tv
            builddate = $(date +%s)
            size = $(du -b ${bin_path} | cut -f1)
            arch = x86_64
            license = custom
            depend = glibc
            EOF

            # Create package manually with tar and zstd
            cd $PACKAGE_ROOT/pkg
            tar -cf - <span class="math-inline">\{name\} \| zstd -z -c -T0 \> \.\./</span>{name}-${VERSION}-1-x86_64.pkg.tar.zst
            cd ../../..

            # Move and create symlink
            mv <span class="math-inline">PACKAGE\_ROOT/</span>{name}-${VERSION}-1-x86_64.pkg.tar.zst ./packages/arch/pool/x86_64/
            cd ./packages/arch/pool/x86_64
            ln -sf <span class="math-inline">\{name\}-</span>{VERSION}-1-x86_64.pkg.tar.zst ${name}-latest-x86_64.pkg.tar.zst
            cd -
          }

          # Build packages
          create_arch_package "nomercymediaserver" "NoMercy-MediaServer" "./output/NoMercyMediaServer" "NoMercy-MediaServer.desktop"
          create_arch_package "nomercyupdater" "NoMercy-Updater" "./output/NoMercyUpdater" "NoMercy-Updater.desktop"
          create_arch_package "nomercyapp" "NoMercy-App" "./output/NoMercyApp" "NoMercy-App.desktop"

          # Generate repo database
          cd packages/arch/pool/x86_64
          tar --use-compress-program=zstd -cf nomercy.db *.pkg.tar.zst
          
      - name: Create Public Key File
        run: |
          echo "${{ vars.GPG_PUBLIC_KEY }}" > packages/nomercy_repo.gpg.pub
          chmod 644 packages/nomercy_repo.gpg.pub

      - name: Configure Package Signing
        run: |
          # Import the GPG key
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import

          # Trust the key
          echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key "${{ vars.GPG_KEY_ID }}" trust

          # Create pacman.conf
          cat > ./pacman.conf << EOF
          [options]
          SigLevel = Optional TrustAll

          [nomercy]
          Server = https://repo.nomercy.tv/arch/pool/$arch
          SigLevel = Required
          EOF

      - name: Export Public Key
        run: |
          gpg --armor --export "${{ vars.GPG_KEY_ID }}" > packages/nomercy_repo.gpg.pub
          chmod 644 packages/nomercy_repo.gpg.pub
        
      - name: Generate Repository Index
        run: |
          VERSION=${{ steps.get-version.outputs.version }}

          # Function to get package versions
          get_versions() {
            local path=$1
            local pattern=$2
            cd $path
            ls -1 $pattern | grep -v latest | sed 's/.*[_-]\([0-9.]*\)[_-].*$/\1/' | sort -V
            cd -
          }

          # Get versions for all packages
          MS_DEB_VERSIONS=$(get_versions packages/apt/pool/main/n/nomercymediaserver "*.deb")
          UP_DEB_VERSIONS=$(get_versions packages/apt/pool/main/n/nomercyupdater "*.deb")
          APP_DEB_VERSIONS=$(get_versions packages/apt/pool/main/n/nomercyapp "*.deb")

          MS_RPM_VERSIONS=$(get_versions packages/rpm/pool/x86_64 "nomercymediaserver-*.rpm")
          UP_RPM_VERSIONS=$(get_versions packages/rpm/pool/x86_64 "nomercyupdater-*.rpm")
          APP_RPM_VERSIONS=$(get_versions packages/rpm/pool/x86_64 "nomercyapp-*.rpm")

          MS_ARCH_VERSIONS=$(get_versions packages/arch/pool/x86_64 "nomercymediaserver-*.pkg.tar.zst")
          UP_ARCH_VERSIONS=$(get_versions packages/arch/pool/x86_64 "nomercyupdater-*.pkg.tar.zst")
          APP_ARCH_VERSIONS=$(get_versions packages/arch/pool/x86_64 "nomercyapp-*.pkg.tar.zst")

          cat > packages/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>NoMercy Package Repository</title>
          </head>
          <body>
            <h1>NoMercy Package Repository</h1>
            <h2>Installation Instructions</h2>

            <h3>Latest Version ($VERSION)</h3>

            <h4>Debian/Ubuntu</h4>
            <pre>
          # For latest version
          echo "deb [signed-by=/etc/apt/keyrings/nomercy-archive-keyring.gpg] https://repo.nomercy.tv/apt stable main" | sudo tee /etc/apt/sources.list.d/nomercy.list
          wget -O- https://repo.nomercy.tv/Release.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/nomercy-archive-keyring.gpg
          sudo apt update
          sudo apt install nomercymediaserver nomercyupdater nomercyapp
          </pre>

            <h4>RedHat/Fedora</h4>
            <pre>
          # For latest version
          sudo dnf config-manager --add-repo https://repo.nomercy.tv/rpm/nomercy.repo
          sudo dnf install nomercymediaserver nomercyupdater nomercyapp
          </pre>

            <h4>Arch Linux</h4>
            <pre>
          # For latest version
          echo "[nomercy]
          Server = https://repo.nomercy.tv/arch/pool/x86_64" | sudo tee /etc/pacman.d/nomercy-repo
          curl -o nomercy.gpg.pub https://repo.nomercy.tv/nomercy_repo.gpg.pub
          sudo pacman-key --add nomercy.gpg.pub
          sudo pacman-key --lsign-key 23F1B8BDEE7408FBB2401B66EBBAD4C5328D9E9B
          sudo pacman -Sy
          sudo pacman -S nomercymediaserver nomercyupdater nomercyapp
          </pre>

            <h3>Available Versions</h3>

            <h4>DEB Packages - MediaServer</h4>
            <ul>
            $(for ver in $MS_DEB_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>

            <h4>DEB Packages - Updater</h4>
            <ul>
            $(for ver in $UP_DEB_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>

            <h4>DEB Packages - App</h4>
            <ul>
            $(for ver in $APP_DEB_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>

            <h4>RPM Packages - MediaServer</h4>
            <ul>
            $(for ver in $MS_RPM_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>

            <h4>RPM Packages - Updater</h4>
            <ul>
            $(for ver in $UP_RPM_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>

            <h4>RPM Packages - App</h4>
            <ul>
            $(for ver in $APP_RPM_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>

            <h4>Arch Packages - MediaServer</h4>
            <ul>
            $(for ver in $MS_ARCH_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>

            <h4>Arch Packages - Updater</h4>
            <ul>
            $(for ver in $UP_ARCH_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>

            <h4>Arch Packages - App</h4>
            <ul>
            $(for ver in $APP_ARCH_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>
          </body>
          </html>
          EOF

      - name: Clean up Arch repository files
        run: |
          # Clean up DEB build files
          rm -rf packages/debian-*
          find packages/apt -type f ! -name "*.deb" -a ! -name "Release*" -delete

          # Clean up RPM build files
          rm -rf packages/rpm/repodata/
          find packages/rpm -type f ! -name "*.rpm" -a ! -name "*.asc" -delete

          # Clean up Arch build files
          rm -rf packages/arch-*
          rm -f packages/arch/pool/x86_64/nomercy.db*
          find packages/arch -type f ! -name "*.pkg.tar.zst" -a ! -name "*.sig" -delete

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./packages
          cname: repo.nomercy.tv