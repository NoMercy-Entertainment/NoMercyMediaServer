name: Package Repository

on:
  release:
    types: [published]
  workflow_run:
    workflows: ["Build Executables"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read

jobs:
  build_packages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Setup .NET SDK for the NoMercy.Server project
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      # Build .NET executables (MediaServer, Updater, App)
      # These steps build single-file executables for linux-x64
      - name: Build NoMercy.Server
        run: |
          mkdir -p ./output
          dotnet publish ./src/NoMercy.Server/NoMercy.Server.csproj \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyMediaServer \
            --output ./output
          chmod +x ./output/NoMercyMediaServer

      - name: Build NoMercy.Updater
        run: |
          mkdir -p ./output
          dotnet publish ./src/NoMercy.Updater/NoMercy.Updater.csproj \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyUpdater \
            --output ./output
          chmod +x ./output/NoMercyUpdater

      - name: Pull App Files # This step pulls frontend files from a separate repo
        uses: actions/checkout@v4
        with:
          repository: NoMercy-Entertainment/NoMercyApp
          path: ./src/NoMercy.App/wwwroot
          fetch-depth: 0
          ref: gh-pages

      - name: Build NoMercy.App # Builds the App executable
        run: |
          mkdir -p ./output
          dotnet publish ./src/NoMercy.App/NoMercy.App.csproj \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyApp \
            --output ./output
          chmod +x ./output/NoMercyApp

      - name: Get Version # Gets version from the project file
        uses: kzrnm/get-net-sdk-project-versions-action@v2
        id: get-version
        with:
          proj-path: ./src/NoMercy.Server/NoMercy.Server.csproj

      # Install dependencies for building packages (apt, rpm, arch)
      # These steps install the necessary tools like rpm, createrepo-c, dpkg-dev, repo-add (via libarchive-tools), gnupg
      - name: Install Package Build Dependencies (DEB/RPM/Arch)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            rpm createrepo-c dpkg-dev devscripts fakeroot build-essential binutils \
            autoconf automake libtool pkg-config gnupg \
            git libgpgme-dev libarchive-dev libcurl4-openssl-dev libssl-dev curl gettext \
            python3 python3-setuptools dash gawk ca-certificates fakechroot libarchive-tools \
            libzstd-dev

      - name: Setup Package Directories # Creates the base directory structure for the repository
        run: |
          mkdir -p packages/{apt,rpm,arch}
          mkdir -p packages/apt/{pool/main/n,dists/stable/main/binary-amd64}
          mkdir -p packages/rpm/pool/x86_64
          # repodata directory is created by createrepo_c
          mkdir -p packages/arch/pool/x86_64

      - name: Import GPG Private Key # Imports the private key for signing repositories
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          # Get the key ID and store in GITHUB_ENV for later use in index.html
          GPG_KEY_ID=$(gpg --list-secret-keys --batch --with-colons | awk -F: '/^sec:/ { print $5 }' | head -n 1)
          echo "GPG_KEY_ID=$GPG_KEY_ID" >> "$GITHUB_ENV"
          echo "Imported GPG key with ID: $GPG_KEY_ID" # Log the key ID for debugging

      - name: Build DEB Packages # Builds .deb files and places them in the pool directory
        run: |
          VERSION=${{ steps.get-version.outputs.version }}

          # Function to create a DEB package
          create_deb_package() {
            local name=$1
            local friendly_name=$2
            local bin_path=$3
            local desktop_file=$4
            local PACKAGE_ROOT="./packages/debian-${name}" # Temporary build directory

            # Clean up any existing package directory
            rm -rf "${PACKAGE_ROOT}"

            # Create directory structure within the temporary build directory
            mkdir -p "${PACKAGE_ROOT}/DEBIAN"
            mkdir -p "${PACKAGE_ROOT}/usr/bin"
            mkdir -p "${PACKAGE_ROOT}/usr/share/applications"
            mkdir -p "${PACKAGE_ROOT}/usr/share/icons/hicolor/scalable/apps"
            mkdir -p "${PACKAGE_ROOT}/lib/systemd/user" # Directory for user systemd services

            # Copy binary to the package structure and set permissions
            cp "${bin_path}" "${PACKAGE_ROOT}/usr/bin/${name}"
            chmod 755 "${PACKAGE_ROOT}/usr/bin/${name}"

            # Copy desktop file and set permissions
            cp "./src/NoMercy.Server/Assets/Linux/${desktop_file}" "${PACKAGE_ROOT}/usr/share/applications/"
            chmod 644 "${PACKAGE_ROOT}/usr/share/applications/${desktop_file}"

            # Copy icon and set permissions
            cp "./src/NoMercy.Server/Assets/Linux/icon.png" "${PACKAGE_ROOT}/usr/share/icons/hicolor/scalable/apps/${friendly_name}.png"
            chmod 644 "${PACKAGE_ROOT}/usr/share/icons/hicolor/scalable/apps/${friendly_name}.png"

            # Create systemd user service file
            cat > "${PACKAGE_ROOT}/lib/systemd/user/${name}.service" << EOF
          [Unit]
          Description=${friendly_name} Service
          After=network.target
          
          [Service]
          Type=simple
          ExecStart=/usr/bin/${name}
          Restart=on-failure
          RestartSec=5
          
          [Install]
          WantedBy=default.target
          EOF
            chmod 644 "${PACKAGE_ROOT}/lib/systemd/user/${name}.service"
  
            # Create control file with package metadata and dependencies
            # Dependencies listed here are examples and might need adjustment based on actual binary requirements
            cat > "${PACKAGE_ROOT}/DEBIAN/control" << EOF
          Package: ${name}
          Version: ${VERSION}
          Architecture: amd64
          Maintainer: NoMercy Entertainment <support@nomercy.tv>
          Description: ${friendly_name}
          Depends: libc6 (>= 2.34), libicu70 (>= 70.1), libssl3 (>= 3.0.0), libgssapi-krb5-2
          Priority: optional
          Section: multimedia
          EOF
            
            # Create postinst script to handle service enable/start after installation
            cat > "${PACKAGE_ROOT}/DEBIAN/postinst" << EOF
          #!/bin/sh
          set -e
          
          # Reload systemd user daemon to recognize the new service file
          systemctl --user daemon-reload || true
          
          # Enable and start the service for the user who ran the installation (using SUDO_USER)
          if [ -n "\$SUDO_USER" ]; then
          su - \$SUDO_USER -c "systemctl --user enable ${name}.service" || true
          su - \$SUDO_USER -c "systemctl --user start ${name}.service" || true
          fi
          
          exit 0
          EOF
            chmod 755 "${PACKAGE_ROOT}/DEBIAN/postinst" # Make the script executable
            
            # Create prerm script to handle service stop/disable before removal
            cat > "${PACKAGE_ROOT}/DEBIAN/prerm" << EOF
          #!/bin/sh
          set -e
          
          # Stop and disable the service for the user who ran the removal (using SUDO_USER)
          if [ -n "\$SUDO_USER" ]; then
          su - \$SUDO_USER -c "systemctl --user stop ${name}.service" || true
          su - \$SUDO_USER -c "systemctl --user disable ${name}.service" || true
          fi
          
          exit 0
          EOF
            chmod 755 "${PACKAGE_ROOT}/DEBIAN/prerm" # Make the script executable
            
            # Build the .deb package using dpkg-deb
            dpkg-deb --build "${PACKAGE_ROOT}"
            
            # Create package-specific directory in the pool if it doesn't exist
            mkdir -p "./packages/apt/pool/main/n/${name}"
            # Move the built package to the pool directory
            mv "${PACKAGE_ROOT}.deb" "./packages/apt/pool/main/n/${name}/${name}_${VERSION}_amd64.deb"
            
            # Create a symlink for the latest version (optional but useful for direct downloads)
            cd "./packages/apt/pool/main/n/${name}"
            ln -sf "${name}_${VERSION}_amd64.deb" "${name}_latest_amd64.deb"
            cd ../../../../../.. # Go back to the repository root directory
          }
          
          # Build packages for each component
          create_deb_package "nomercymediaserver" "NoMercy-MediaServer" "./output/NoMercyMediaServer" "NoMercy-MediaServer.desktop"
          create_deb_package "nomercyupdater" "NoMercy-Updater" "./output/NoMercyUpdater" "NoMercy-Updater.desktop"
          create_deb_package "nomercyapp" "NoMercy-App" "./output/NoMercyApp" "NoMercy-App.desktop"
        
      - name: Build RPM Packages # Builds .rpm files and places them in the pool directory
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          
          # Setup RPM build environment in the home directory
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          
          # Function to create an RPM package
          create_rpm_package() {
            local name=$1
            local friendly_name=$2
            local bin_path=$3
            local desktop_file=$4
          
            # Copy source files (binary, desktop, icon) to the RPM SOURCES directory
            cp "${bin_path}" ~/rpmbuild/SOURCES/"${name}"
            cp "./src/NoMercy.Server/Assets/Linux/${desktop_file}" ~/rpmbuild/SOURCES/
            cp "./src/NoMercy.Server/Assets/Linux/icon.png" ~/rpmbuild/SOURCES/
          
            # Create the RPM spec file
            cat > ~/rpmbuild/SPECS/"${name}".spec << EOF
          Name: ${name}
          Version: ${VERSION}
          Release: 1%{?dist}
          Summary: ${friendly_name}
          License: Proprietary # Or the actual license
          URL: https://nomercy.tv
          BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root # Temporary build root
            
          %description
          Modern Media Server Solution # Package description
          
          %install
          # Create installation directories within the build root
          mkdir -p %{buildroot}/usr/bin
          mkdir -p %{buildroot}/usr/share/applications
          mkdir -p %{buildroot}/usr/share/icons/hicolor/scalable/apps
          # Copy files from SOURCES to the build root and set permissions
          cp %{_sourcedir}/${name} %{buildroot}/usr/bin/
          cp %{_sourcedir}/${desktop_file} %{buildroot}/usr/share/applications/
          cp %{_sourcedir}/icon.png %{buildroot}/usr/share/icons/hicolor/scalable/apps/${friendly_name}.png
          chmod 755 %{buildroot}/usr/bin/${name} # Make binary executable
          
          %files
          # List installed files and their permissions/ownership
          %attr(755,root,root) /usr/bin/${name}
          %attr(644,root,root) /usr/share/applications/${desktop_file}
          %attr(644,root,root) /usr/share/icons/hicolor/scalable/apps/${friendly_name}.png
          
          %clean
          # Clean up the build root
          rm -rf %{buildroot}
          
          %changelog
          # Changelog entries
          * $(date '+%a %b %d %Y') NoMercy <support@nomercy.tv> - ${VERSION}-1
          - Initial package
          EOF
            
            # Build the RPM package
            rpmbuild -bb ~/rpmbuild/SPECS/"${name}".spec
            
            # Move the built package to the RPM pool directory
            mv ~/rpmbuild/RPMS/x86_64/"${name}-${VERSION}-1.x86_64.rpm" packages/rpm/pool/x86_64/
            # Create a symlink for the latest version (optional but useful)
            cd packages/rpm/pool/x86_64
            ln -sf "${name}-${VERSION}-1.x86_64.rpm" "${name}-latest.x86_64.rpm"
            cd - # Go back to the original directory
          }
            
            # Build packages for each component
            create_rpm_package "nomercymediaserver" "NoMercy-MediaServer" "./output/NoMercyMediaServer" "NoMercy-MediaServer.desktop"
            create_rpm_package "nomercyupdater" "NoMercy-Updater" "./output/NoMercyUpdater" "NoMercy-Updater.desktop"
            create_rpm_package "nomercyapp" "NoMercy-App" "./output/NoMercyApp" "NoMercy-App.desktop"
          
      - name: Build Arch Packages # Builds .pkg.tar.zst files and places them in the pool directory
        run: |
          VERSION=${{ steps.get-version.outputs.version }}

          # Function to create an Arch package manually
          create_arch_package() {
            local name=$1
            local friendly_name=$2
            local bin_path=$3
            local desktop_file=$4
            local PACKAGE_ROOT=./packages/arch-${name} # Temporary build directory
            local PKG_DIR=${PACKAGE_ROOT}/pkg/${name} # Staging directory for package contents

            # Clean previous build directory
            rm -rf ${PACKAGE_ROOT}
            # Create the staging directory structure
            mkdir -p ${PKG_DIR}/usr/{bin,share/{applications,icons/hicolor/scalable/apps}}

            # Create the .PKGBUILD file in the staging directory
            cat > ${PKG_DIR}/.PKGBUILD << EOF
          pkgname = ${name}
          pkgver = ${VERSION}-1 # Arch package version format: pkgver-pkgrel
          pkgdesc = ${friendly_name}
          url = https://nomercy.tv
          builddate = $(date +%s)
          size = $(du -b ${bin_path} | cut -f1) # Size of the binary
          arch = x86_64
          license = custom # Or the actual license
          depend = glibc # Basic dependency, add others if needed
          # No source or build steps needed as we are packaging pre-built binaries
          EOF
            # Ensure .PKGBUILD has correct permissions
            chmod 644 "${PKG_DIR}/.PKGBUILD"
            
            # Copy binary, desktop file, and icon into the staging directory
            install -Dm755 ${bin_path} ${PKG_DIR}/usr/bin/${name}
            install -Dm644 ./src/NoMercy.Server/Assets/Linux/${desktop_file} ${PKG_DIR}/usr/share/applications/
            install -Dm644 ./src/NoMercy.Server/Assets/Linux/icon.png ${PKG_DIR}/usr/share/icons/hicolor/scalable/apps/${friendly_name}.png
            
            # Create the .tar archive of the package contents
            # --directory .: archive contents of the current directory (PKG_DIR)
            # --owner=0 --group=0: set owner/group to root
            # --mode=644: set default file permissions in archive (install overrides for specific files)
            # --xform="s,^${name}/,," : Remove the initial directory component (${name}/) from paths
            cd ${PKG_DIR}
            tar --create \
            --file ../../pkg.tar \
            --directory . \
            --owner=0 --group=0 \
            --mode=644 \
            --xform="s,^${name}/,," \
            . # Archive all contents of the current directory
            cd ../../.. # Go back to the original directory
            
            # Compress the .tar archive using zstd
            zstd -19 -T0 ${PACKAGE_ROOT}/pkg.tar -o "${PACKAGE_ROOT}/${name}-${VERSION}-1-x86_64.pkg.tar.zst"
            # Remove the intermediate .tar file
            rm ${PACKAGE_ROOT}/pkg.tar
            
            # Move the final package file to the Arch pool directory
            mv "${PACKAGE_ROOT}/${name}-${VERSION}-1-x86_64.pkg.tar.zst" "./packages/arch/pool/x86_64/"
          }
          
          # Build packages for each component using the manual method
          create_arch_package "nomercymediaserver" "NoMercy-MediaServer" "./output/NoMercyMediaServer" "NoMercy-MediaServer.desktop"
          create_arch_package "nomercyupdater" "NoMercy-Updater" "./output/NoMercyUpdater" "NoMercy-Updater.desktop"
          create_arch_package "nomercyapp" "NoMercy-App" "./output/NoMercyApp" "NoMercy-App.desktop"

      - name: Generate RPM Repository Metadata and Sign # Generates the RPM repository metadata and signs it
        run: |
          cd packages/rpm
          # Generate repo metadata using createrepo_c
          createrepo_c .
          # Sign the repository metadata file (repomd.xml)
          gpg --batch --yes --armor --detach-sig -o repodata/repomd.xml.asc repodata/repomd.xml
          # Create the .repo file for users to add the repository
          cat > nomercy.repo << EOF
          [nomercy]
          name=NoMercy Entertainment RPM Repository
          baseurl=https://repo.nomercy.tv/rpm/
          enabled=1
          gpgcheck=1
          gpgkey=https://repo.nomercy.tv/nomercy_repo.gpg.pub # Points to the public key at the repo root
          EOF
          cd ../.. # Go back to the repository root directory
      
      - name: Generate Arch Repository Database and Sign # Generates the Arch repository database and signs it
        run: |
          cd packages/arch/pool/x86_64
          # Create/update the database file from all packages in the directory
          # -n: do not sign packages
          # -R: regenerate database completely
          repo-add -n -R nomercy.db.tar.gz *.pkg.tar.zst
          # Sign the database file (the .tar.gz file)
          gpg --batch --yes --detach-sign --armor -o nomercy.db.tar.gz.sig nomercy.db.tar.gz
          # Create symbolic links for the database and its signature (standard convention)
          ln -sf nomercy.db.tar.gz nomercy.db
          ln -sf nomercy.db.tar.gz.sig nomercy.db.sig
          # Cleanup temporary files created by repo-add
          rm -f *.old *.files* *.db.tar.gz.old*
          cd ../../.. # Go back to the repository root directory
      
      - name: Generate APT Repository Metadata and Sign # Generates the APT repository metadata and signs it
        run: |
          # Ensure complete directory structure exists and has correct permissions
          mkdir -p packages/apt/dists/stable/main/binary-amd64
          chmod -R 755 packages/apt # Ensure permissions are correct for web serving
          
          cd packages/apt
          
          # Remove any existing metadata and signature files
          rm -rf dists/stable/main/binary-amd64/Packages*
          rm -f dists/stable/Release* dists/stable/InRelease dists/stable/Release.gpg
          
          # Generate package index file (Packages)
          dpkg-scanpackages --multiversion pool/ > dists/stable/main/binary-amd64/Packages
          gzip -k -f dists/stable/main/binary-amd64/Packages # Create gzipped version
          
          # Create the Release file header
          cd dists/stable
          cat > Release << EOF
          Origin: NoMercy Entertainment
          Label: NoMercy
          Suite: stable
          Codename: stable
          Version: 1.0
          Architectures: amd64
          Components: main
          Description: NoMercy Entertainment Repository
          Date: $(date -u '+%a, %d %b %Y %H:%M:%S UTC') # Current date in required format
          EOF
        
          # Calculate SHA256 hashes for all files in the repository (excluding signatures)
          # and append them to the Release file under the SHA256: header
          cd .. # Move to dists directory to calculate paths correctly
          { # Use a subshell to group commands for appending
          echo "SHA256:"
          # Find all files in the stable/ directory (excluding signature files)
          # Calculate sha256sum, format output to "hash size filename"
          # sed is used to format the output to match the required "hash size filename" structure
          find stable/ -type f ! -name "InRelease" ! -name "Release.gpg" -print0 | xargs -0 sha256sum | sed "s/\s\+/\t/" | sed "s/stable\// /"
          } >> stable/Release
          
          # Sign the Release file
          cd stable
          # Create the inline signature (InRelease)
          gpg --batch --yes --clear-sign -o InRelease Release
          # Create the detached signature (Release.gpg)
          gpg --batch --yes --detach-sign --armor -o Release.gpg Release
          
          cd ../../../.. # Go back to the repository root directory
      
      - name: Export GPG Public Key # Exports the public key of the imported private key
        run: |
          # Ensure the packages directory exists
          mkdir -p packages
          # Export the public key associated with the imported private key (using the key ID from GITHUB_ENV)
          gpg --batch --yes --armor --export "${{ env.GPG_KEY_ID }}" > packages/nomercy_repo.gpg.pub
          # Set permissions for the public key file
          chmod 644 packages/nomercy_repo.gpg.pub
      
      - name: Generate Repository Index # Creates the index.html file with installation instructions and version lists
        run: |
          VERSION=${{ steps.get-version.outputs.version }} # Latest version
          GPG_KEY_ID=${{ env.GPG_KEY_ID }} # GPG key ID for Arch instructions
          
          # Function to get package versions from filenames in a directory
          get_versions() {
            local path=$1
            local pattern=$2
            # Use find to list files, grep to filter, sed to extract version, sort -V for version sorting
            find "$path" -maxdepth 1 -name "$pattern" -print | \
              grep -v latest | \
              sed -E 's/.*[_-]([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?)[_-].*$/\1/' | \
              sort -V
          }
          
          # Get versions for each package and distribution
          MS_DEB_VERSIONS=$(get_versions packages/apt/pool/main/n/nomercymediaserver "*.deb")
          UP_DEB_VERSIONS=$(get_versions packages/apt/pool/main/n/nomercyupdater "*.deb")
          APP_DEB_VERSIONS=$(get_versions packages/apt/pool/main/n/nomercyapp "*.deb")
          
          MS_RPM_VERSIONS=$(get_versions packages/rpm/pool/x86_64 "nomercymediaserver-*.rpm")
          UP_RPM_VERSIONS=$(get_versions packages/rpm/pool/x86_64 "nomercyupdater-*.rpm")
          APP_RPM_VERSIONS=$(get_versions packages/rpm/pool/x86_64 "nomercyapp-*.rpm")
          
          MS_ARCH_VERSIONS=$(get_versions packages/arch/pool/x86_64 "nomercymediaserver-*.pkg.tar.zst")
          UP_ARCH_VERSIONS=$(get_versions packages/arch/pool/x86_64 "nomercyupdater-*.pkg.tar.zst")
          APP_ARCH_VERSIONS=$(get_versions packages/arch/pool/x86_64 "nomercyapp-*.pkg.tar.zst")
          
          # Generate the index.html file
          cat > packages/index.html << EOF
            <!DOCTYPE html>
            <html>
            <head>
            <title>NoMercy Package Repository</title>
            <style>
          body { font-family: sans-serif; line-height: 1.6; margin: 20px; }
          pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }
          h1, h2, h3, h4 { color: #333; }
          ul { list-style-type: disc; margin-left: 20px; }
          code { font-family: monospace; }
            </style>
            </head>
            <body>
            <h1>NoMercy Package Repository</h1>
            <p>This repository provides packages for NoMercy Media Server, Updater, and App for various Linux distributions.</p>
          
            <h2>Installation Instructions</h2>
          
            <h3>Latest Version ($VERSION)</h3>
          
            <h4>Debian/Ubuntu (APT)</h4>
            <p>Add the repository and import the GPG key. This sets up your system to receive updates via APT.</p>
            <pre><code class="language-bash">
            # Add the repository source list
            echo "deb [signed-by=/etc/apt/keyrings/nomercy-archive-keyring.gpg] https://repo.nomercy.tv/apt stable main" | sudo tee /etc/apt/sources.list.d/nomercy.list > /dev/null
            
            # Create the directory for keyrings if it doesn't exist
            sudo mkdir -p /etc/apt/keyrings
            # Download the GPG public key and dearmor it into the keyrings directory
            wget -O - https://repo.nomercy.tv/nomercy_repo.gpg.pub | sudo gpg --dearmor -o /etc/apt/keyrings/nomercy-archive-keyring.gpg
            
            # Update your package list to include the new repository
            sudo apt update
            
            # Install the packages
            sudo apt install nomercymediaserver nomercyupdater nomercyapp
            </code></pre>
          
            <h4>Fedora/RHEL/CentOS (RPM)</h4>
            <p>Add the repository file and install the packages. This sets up your system to receive updates via DNF/YUM.</p>
            <pre><code class="language-bash">
            # Download the repository file to your system's repository configuration directory
            sudo wget -O /etc/yum.repos.d/nomercy.repo https://repo.nomercy.tv/rpm/nomercy.repo
            
            # Import the GPG public key (if not already trusted on your system)
            sudo rpm --import https://repo.nomercy.tv/nomercy_repo.gpg.pub
            
            # Install packages using dnf (Fedora 22+ / RHEL 8+) or yum (older systems)
            sudo dnf install nomercymediaserver nomercyupdater nomercyapp
            # Or for older systems: sudo yum install nomercymediaserver nomercyupdater nomercyapp
            </code></pre>
          
            <h4>Arch Linux (pacman)</h4>
            <p>Add the repository to your pacman configuration and import the GPG key. This sets up your system to receive updates via pacman.</p>
            <pre><code class="language-bash">
            # Add the repository section to your /etc/pacman.conf file
            # You can add this block directly or save it as a separate file like /etc/pacman.d/nomercy-repo and Include it in pacman.conf
            printf "[nomercy]\nServer = https://repo.nomercy.tv/arch/pool/\$arch\nSigLevel = Required\n" | sudo tee -a /etc/pacman.conf # Or use /etc/pacman.d/nomercy-repo
            
            # Download the GPG public key
            curl -o nomercy.gpg.pub https://repo.nomercy.tv/nomercy_repo.gpg.pub
            
            # Add the key to the pacman keyring and then locally sign it to trust it
            # Replace GPG_KEY_ID below with the actual key ID shown in the output or on this page.
            sudo pacman-key --add nomercy.gpg.pub
            sudo pacman-key --lsign-key ${GPG_KEY_ID} # Use the dynamically obtained key ID
            rm nomercy.gpg.pub # Clean up the downloaded key file
            
            # Sync your package databases to include the new repository
            sudo pacman -Sy
            
            # Install the packages
            sudo pacman -S nomercymediaserver nomercyupdater nomercyapp
            </code></pre>
          
            <h2>Available Versions</h2>
            <p>The repository keeps all published versions. You can install a specific version using your package manager's syntax (e.g., <code>sudo apt install nomercymediaserver=1.2.3</code>, <code>sudo dnf install nomercymediaserver-1.2.3</code>, <code>sudo pacman -S nomercymediaserver=1.2.3-1</code>).</p>
          
            <h4>DEB Packages - MediaServer</h4>
            <ul>
            $(for ver in $MS_DEB_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>
          
            <h4>DEB Packages - Updater</h4>
            <ul>
            $(for ver in $UP_DEB_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>
          
            <h4>DEB Packages - App</h4>
            <ul>
            $(for ver in $APP_DEB_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>
          
            <h4>RPM Packages - MediaServer</h4>
            <ul>
            $(for ver in $MS_RPM_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>
          
            <h4>RPM Packages - Updater</h4>
            <ul>
            $(for ver in $UP_RPM_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>
          
            <h4>RPM Packages - App</h4>
            <ul>
            $(for ver in $APP_RPM_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>
          
            <h4>Arch Packages - MediaServer</h4>
            <ul>
            $(for ver in $MS_ARCH_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>
          
            <h4>Arch Packages - Updater</h4>
            <ul>
            $(for ver in $UP_ARCH_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>
          
            <h4>Arch Packages - App</h4>
            <ul>
            $(for ver in $APP_ARCH_VERSIONS; do echo "<li>$ver</li>"; done)
            </ul>
            </body>
            </html>
            EOF
      
      - name: Deploy to GitHub Pages # Deploys the 'packages' directory to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./packages # Publish the 'packages' directory
          cname: repo.nomercy.tv # Set the custom domain
