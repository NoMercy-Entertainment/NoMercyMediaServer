name: CI/CD Pipeline

on:
  push:
    paths:
      - 'src/**'
      - 'tests/**'
    branches:
      - dev
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
    branches:
      - dev
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should_build: ${{ steps.changes.outputs.should_build }}
    
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: "9.0.x"
          
      - name: Restore dependencies
        run: dotnet restore NoMercy.Server.sln

      - name: Run tests
        run: >
          dotnet test NoMercy.Server.sln 
          --configuration Release
          --runtime linux-x64
          --collect:"XPlat Code Coverage"
          --settings tests/coverletArgs.runsettings
          --verbosity minimal

      - name: Check for source changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "release" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif git diff --quiet HEAD~1 HEAD -- src/; then
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: bump-version
        if: success() && github.ref == 'refs/heads/dev' && steps.changes.outputs.should_build == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git config --global --add safe.directory ${{ github.workspace }}
          git fetch --tags
          
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
          MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
          PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)
          
          NEW_PATCH=$(($PATCH + 1))
          NEW_VERSION=$MAJOR.$MINOR.$NEW_PATCH 
          
          sed -i "s|<Version>.*</Version>|<Version>${NEW_VERSION}</Version>|" src/NoMercy.Server/NoMercy.Server.csproj
          git add src/NoMercy.Server/NoMercy.Server.csproj
          git commit -m "Update version to ${NEW_VERSION}"
          git push origin dev

      - name: Get Version
        id: get-version
        uses: kzrnm/get-net-sdk-project-versions-action@v2
        with:
          proj-path: ./src/NoMercy.Server/NoMercy.Server.csproj

      - name: Merge Dev into Master
        if: success() && github.ref == 'refs/heads/dev' && steps.changes.outputs.should_build == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git fetch origin
          git checkout master
          git pull --rebase origin master
          git merge origin/dev --no-edit --allow-unrelated-histories -X theirs
          git push origin master
          git checkout dev
          git rebase master
          git push --force-with-lease origin dev

  build_executables:
    needs: test
    if: needs.test.outputs.should_build == 'true' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Restore dependencies
        run: dotnet restore NoMercy.Server.sln

      - name: Publish NoMercy.Server
        run: |
          mkdir -p ./output
      
          # Publish for Linux
          dotnet publish ./src/NoMercy.Server/NoMercy.Server.csproj \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyMediaServer \
            --output ./output
          mv ./output/NoMercyMediaServer ./output/NoMercyMediaServer-linux-x64
      
          # Windows Build
          dotnet publish ./src/NoMercy.Server/NoMercy.Server.csproj \
            --configuration Release \
            --runtime win-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyMediaServer \
            --output ./output
          mv ./output/NoMercyMediaServer.exe ./output/NoMercyMediaServer-windows-x64.exe

          # macOS Build
          dotnet publish ./src/NoMercy.Server/NoMercy.Server.csproj \
            --configuration Release \
            --runtime osx-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyMediaServer \
            --output ./output
          
          mkdir -p ./output/NoMercyMediaServer.app/Contents/{MacOS,Resources}
          cp ./output/NoMercyMediaServer ./output/NoMercyMediaServer.app/Contents/MacOS/
          cp ./src/NoMercy.Server/Assets/MacOS/Info.plist ./output/NoMercyMediaServer.app/Contents/
          cp ./src/NoMercy.Server/Assets/MacOS/icon.icns ./output/NoMercyMediaServer.app/Contents/Resources/AppIcon.icns
          chmod +x ./output/NoMercyMediaServer.app/Contents/MacOS/NoMercyMediaServer
          tar -czf ./output/NoMercyMediaServer-macos-x64.tar.gz -C ./output NoMercyMediaServer.app
          mv ./output/NoMercyMediaServer ./output/NoMercyMediaServer-macos-x64

      - name: Publish NoMercy.Updater
        run: |
          # Publish for Linux
          dotnet publish ./src/NoMercy.Updater/NoMercy.Updater.csproj \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyUpdater \
            --output ./output
          mv ./output/NoMercyUpdater ./output/NoMercyUpdater-linux-x64
      
          # Windows Build
          dotnet publish ./src/NoMercy.Updater/NoMercy.Updater.csproj \
            --configuration Release \
            --runtime win-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyUpdater \
            --output ./output
          mv ./output/NoMercyUpdater.exe ./output/NoMercyUpdater-windows-x64.exe
      
          # macOS Build
          dotnet publish ./src/NoMercy.Updater/NoMercy.Updater.csproj \
            --configuration Release \
            --runtime osx-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyUpdater \
            --output ./output

          mkdir -p ./output/NoMercyUpdater.app/Contents/{MacOS,Resources}
          cp ./output/NoMercyUpdater ./output/NoMercyUpdater.app/Contents/MacOS/
          cp ./src/NoMercy.Server/Assets/MacOS/Info.plist.updater ./output/NoMercyUpdater.app/Contents/Info.plist
          cp ./src/NoMercy.Server/Assets/MacOS/icon.icns ./output/NoMercyUpdater.app/Contents/Resources/AppIcon.icns
          chmod +x ./output/NoMercyUpdater.app/Contents/MacOS/NoMercyUpdater
          tar -czf ./output/NoMercyUpdater-macos-x64.tar.gz -C ./output NoMercyUpdater.app
          mv ./output/NoMercyUpdater ./output/NoMercyUpdater-macos-x64

      - name: Pull App Files
        uses: actions/checkout@v4
        with:
          repository: NoMercy-Entertainment/NoMercyApp
          path: ./src/NoMercy.App/Resources/wwwroot
          fetch-depth: 0
          ref: gh-pages

      - name: Move App Files
        run: |
          mv ./src/NoMercy.App/Resources/wwwroot/* ./src/NoMercy.App/Resources
          rm -rf ./src/NoMercy.App/Resources/wwwroot

      - name: Publish NoMercy.App
        run: |
          # Publish for Linux
          dotnet publish ./src/NoMercy.App/NoMercy.App.csproj \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyApp \
            /p:PublishTrimmed=true \
            --output ./output
          mv ./output/NoMercyApp ./output/NoMercyApp-linux-x64
      
          # Windows Build
          dotnet publish ./src/NoMercy.App/NoMercy.App.csproj \
            --configuration Release \
            --runtime win-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyApp \
            /p:PublishTrimmed=true \
            --output ./output
          mv ./output/NoMercyApp.exe ./output/NoMercyApp-windows-x64.exe
      
          # macOS Build
          dotnet publish ./src/NoMercy.App/NoMercy.App.csproj \
            --configuration Release \
            --runtime osx-x64 \
            --self-contained true \
            /p:PublishSingleFile=true \
            /p:IncludeNativeLibrariesForSelfExtract=true \
            /p:IncludeAllContentForSelfExtract=true \
            /p:EnableCompressionInSingleFile=true \
            /p:DebugType=None \
            /p:DebugSymbols=false \
            /p:PublishReadyToRun=false \
            /p:OutputFileName=NoMercyApp \
            /p:PublishTrimmed=true \
            --output ./output

          mkdir -p ./output/NoMercyApp.app/Contents/{MacOS,Resources}
          cp ./output/NoMercyApp ./output/NoMercyApp.app/Contents/MacOS/
          cp ./src/NoMercy.Server/Assets/MacOS/Info.plist.app ./output/NoMercyApp.app/Contents/Info.plist
          cp ./src/NoMercy.Server/Assets/MacOS/icon.icns ./output/NoMercyApp.app/Contents/Resources/AppIcon.icns
          chmod +x ./output/NoMercyApp.app/Contents/MacOS/NoMercyApp
          tar -czf ./output/NoMercyApp-macos-x64.tar.gz -C ./output NoMercyApp.app
          mv ./output/NoMercyApp ./output/NoMercyApp-macos-x64

      - name: Create DMGs for macOS
        continue-on-error: true
        run: |
          npm install -g create-dmg
          
          # Create DMG for MediaServer
          npx create-dmg \
            ./output/NoMercyMediaServer.app \
            ./output \
            --overwrite \
            --dmg-title="NoMercyMediaServer" \
            --window-size 500 300 \
            --icon-size 128 \
            --icon NoMercyMediaServer.app 100 150 \
            --app-drop-link 400 150

          # Create DMG for Updater
          npx create-dmg \
            ./output/NoMercyUpdater.app \
            ./output \
            --overwrite \
            --dmg-title="NoMercyUpdater" \
            --window-size 500 300 \
            --icon-size 128 \
            --icon NoMercyUpdater.app 100 150 \
            --app-drop-link 400 150

          # Create DMG for App
          npx create-dmg \
            ./output/NoMercyApp.app \
            ./output \
            --overwrite \
            --dmg-title="NoMercyApp" \
            --window-size 500 300 \
            --icon-size 128 \
            --icon NoMercyApp.app 100 150 \
            --app-drop-link 400 150

      - name: Rename DMG files
        continue-on-error: true
        run: |
          mv "./output/NoMercy MediaServer 1.0.0.dmg" ./output/NoMercyMediaServer-macos-x64.dmg || true
          mv "./output/NoMercy Updater 1.0.0.dmg" ./output/NoMercyUpdater-macos-x64.dmg || true
          mv "./output/NoMercy 1.0.0.dmg" ./output/NoMercyApp-macos-x64.dmg || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: executables
          path: ./output/*
          retention-days: 30

      - name: Get Short SHA
        id: get_short_sha
        run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        
      - name: Create Release
        if: github.ref == 'refs/heads/master' || github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.test.outputs.version }}
          name: NoMercy MediaServer v${{ needs.test.outputs.version }}
          body: |            
            ## What's New
            This release includes the latest features, improvements, and bug fixes for NoMercy MediaServer.
            
            ## Downloads
            Binary executables are available for:
            - Windows (x64)
            - macOS (x64)
            - Linux (x64)
            
            Each platform includes the MediaServer, Updater, and App components.
            
            ## Installation
            Download the appropriate files for your platform and follow the installation instructions in our documentation.
            
            ## Feedback
            If you encounter any issues, please report them on our GitHub repository.

            Build: ${{ steps.get_short_sha.outputs.short_sha }}
          draft: false
          prerelease: false
          files: |
            ./output/NoMercyMediaServer-*
            ./output/NoMercyUpdater-*
            ./output/NoMercyApp-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_packages:
    needs: [test, build_executables]
    if: (needs.test.outputs.should_build == 'true' || github.event_name == 'release' || github.event_name == 'workflow_dispatch') && (github.ref == 'refs/heads/master' || github.event_name == 'release')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: executables
          path: ./output

      - name: Make Linux executables executable
        run: |
          chmod +x ./output/NoMercyMediaServer-linux-x64
          chmod +x ./output/NoMercyUpdater-linux-x64
          chmod +x ./output/NoMercyApp-linux-x64

      - name: Install Package Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm createrepo-c dpkg-dev devscripts fakeroot build-essential binutils autoconf automake libtool pkg-config gnupg

      - name: Install Arch Build Dependencies
        run: |
          sudo apt -q -y install --no-install-recommends \
            git pkg-config meson gcc libtool libgpgme-dev libarchive-dev ninja-build \
            libcurl4-openssl-dev libssl-dev curl gettext python3 python3-setuptools \
            dash gawk ca-certificates fakeroot fakechroot libarchive-tools

          # Need a more recent version of Meson
          sudo mkdir -p /usr/local/meson
          sudo git clone --depth 1 https://github.com/mesonbuild/meson.git /usr/local/meson

          # Backup existing meson if present
          if [ -f /usr/bin/meson ]; then
            mver=$(meson --version)
            sudo mv /usr/bin/meson "/usr/bin/meson-${mver}"
          fi

          # Create symlink to new meson
          if [ -f /usr/local/meson/meson.py ]; then
            sudo ln -sf /usr/local/meson/meson.py /usr/bin/meson
          else
            echo "ERROR: cannot locate /usr/local/meson/meson.py"
            exit 1
          fi
          
          sudo rm -rf pacman
          git clone https://gitlab.archlinux.org/pacman/pacman.git
          cd pacman
          meson setup -Ddoc=disabled build
          ninja -C build
        
          [ -d build ] || {
          echo "Directory pacman/build does not exist. Exiting."
          exit 1
          }
          cd build
          grep mirror scripts/libmakepkg/source/git.sh > /dev/null && {
          cat scripts/libmakepkg/source/git.sh | sed -e "s/---mirror//" > /tmp/git$$
          cp /tmp/git$$ scripts/libmakepkg/source/git.sh
          rm -f /tmp/git$$
          }
        
          sudo meson install --no-rebuild --quiet

      - name: Setup Package Directories
        run: |
          mkdir -p packages/{apt,rpm,arch,debian,redhat}
          mkdir -p packages/apt/{pool/main/n,dists/stable/main/binary-amd64}
          mkdir -p packages/rpm/pool/x86_64
          mkdir -p packages/rpm/repodata
          mkdir -p packages/redhat/repodata
          mkdir -p packages/arch/pool/x86_64

      - name: Build DEB Packages
        run: |
          VERSION=${{ needs.test.outputs.version }}
          
          # Function to create DEB package
          create_deb_package() {
            local name=$1
            local friendly_name=$2
            local bin_path=$3
            local desktop_file=$4
            local PACKAGE_ROOT="./packages/debian-${name}"

            # Clean up any existing package directory
            rm -rf "${PACKAGE_ROOT}"
          
            # Create directory structure
            mkdir -p "${PACKAGE_ROOT}/DEBIAN"
            mkdir -p "${PACKAGE_ROOT}/usr/bin"
            mkdir -p "${PACKAGE_ROOT}/usr/share/applications"
            mkdir -p "${PACKAGE_ROOT}/usr/share/icons/hicolor/scalable/apps"
            mkdir -p "${PACKAGE_ROOT}/lib/systemd/user"
      
            # Copy binary
            cp "${bin_path}" "${PACKAGE_ROOT}/usr/bin/${name}"
            chmod 755 "${PACKAGE_ROOT}/usr/bin/${name}"
      
            # Copy desktop file
            cp "./src/NoMercy.Server/Assets/Linux/${desktop_file}" "${PACKAGE_ROOT}/usr/share/applications/"
            chmod 644 "${PACKAGE_ROOT}/usr/share/applications/${desktop_file}"
      
            # Copy icon
            cp "./src/NoMercy.Server/Assets/Linux/icon.png" "${PACKAGE_ROOT}/usr/share/icons/hicolor/scalable/apps/${friendly_name}.png"
            chmod 644 "${PACKAGE_ROOT}/usr/share/icons/hicolor/scalable/apps/${friendly_name}.png"
      
            # Create systemd service file
            cat > "${PACKAGE_ROOT}/lib/systemd/user/${name}.service" << EOF
          [ Unit ]
          Description=${friendly_name} Service
          After=network.target
    
          [ Service ]
          Type=simple
          ExecStart=/usr/bin/${name}
          Restart=on-failure
          RestartSec=5
    
          [ Install ]
          WantedBy=default.target
          EOF
          
            chmod 644 "${PACKAGE_ROOT}/lib/systemd/user/${name}.service"
          
            # Create control file with dependencies
            cat > "${PACKAGE_ROOT}/DEBIAN/control" << EOF
          Package: ${name}
          Version: ${VERSION}
          Architecture: amd64
          Maintainer: NoMercy Entertainment <support@nomercy.tv>
          Description: ${friendly_name}
          Depends: libc6 (>= 2.34), libicu70 (>= 70.1), libssl3 (>= 3.0.0), libgssapi-krb5-2
          Priority: optional
          Section: multimedia
          EOF
      
            # Create postinst script
            cat > "${PACKAGE_ROOT}/DEBIAN/postinst" << EOF
          #!/bin/sh
          set -e
          
          # Reload systemd user daemon
          systemctl --user daemon-reload || true
          
          # Enable and start service
          if [ -n "\$SUDO_USER" ]; then
          su - \$SUDO_USER -c "systemctl --user enable ${name}.service" || true
          su - \$SUDO_USER -c "systemctl --user start ${name}.service" || true
          fi
          
          exit 0
          EOF
            chmod 755 "${PACKAGE_ROOT}/DEBIAN/postinst"
            
            # Create prerm script
            cat > "${PACKAGE_ROOT}/DEBIAN/prerm" << EOF
          #!/bin/sh
          set -e
          
          # Stop and disable service
          if [ -n "\$SUDO_USER" ]; then
          su - \$SUDO_USER -c "systemctl --user stop ${name}.service" || true
          su - \$SUDO_USER -c "systemctl --user disable ${name}.service" || true
          fi
          
          exit 0
          EOF
            chmod 755 "${PACKAGE_ROOT}/DEBIAN/prerm"
  
            # Build package
            dpkg-deb --build "${PACKAGE_ROOT}"
      
            # Create package directory and move package
            mkdir -p "./packages/apt/pool/main/n/${name}"
            mv "${PACKAGE_ROOT}.deb" "./packages/apt/pool/main/n/${name}/${name}_${VERSION}_amd64.deb"
            
            # Create symlink
            cd "./packages/apt/pool/main/n/${name}"
            ln -sf "${name}_${VERSION}_amd64.deb" "${name}_latest_amd64.deb"
            cd ../../../../../..
          }
    
          # Build packages
          create_deb_package "nomercymediaserver" "NoMercy-MediaServer" "./output/NoMercyMediaServer-linux-x64" "NoMercy-MediaServer.desktop"
          create_deb_package "nomercyupdater" "NoMercy-Updater" "./output/NoMercyUpdater-linux-x64" "NoMercy-Updater.desktop"
          create_deb_package "nomercyapp" "NoMercy-App" "./output/NoMercyApp-linux-x64" "NoMercy-App.desktop"
      
          # Update package index
          cd packages/apt
          rm -f dists/stable/main/binary-amd64/Packages*
          dpkg-scanpackages --multiversion pool/ > dists/stable/main/binary-amd64/Packages
          gzip -k -f dists/stable/main/binary-amd64/Packages

      - name: Build RPM Packages and Sign Repository
        run: |
          VERSION=${{ needs.test.outputs.version }}

          # Setup RPM build environment
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

          # Function to create RPM package
          create_rpm_package() {
            local name=$1
            local friendly_name=$2
            local bin_path=$3
            local desktop_file=$4

            # Copy source files
            cat > ~/rpmbuild/SPECS/"${name}".spec << EOF
          Name: ${name}
          Version: ${VERSION}
          Release: 1%{?dist}
          Summary: ${friendly_name}
          License: Proprietary
          URL: https://nomercy.tv
          BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
    
          %description
          Modern Media Server Solution
    
          %install
          mkdir -p %{buildroot}/usr/bin
          mkdir -p %{buildroot}/usr/share/applications
          mkdir -p %{buildroot}/usr/share/icons/hicolor/scalable/apps
          cp %{_sourcedir}/${name} %{buildroot}/usr/bin/
          cp %{_sourcedir}/${desktop_file} %{buildroot}/usr/share/applications/
          cp %{_sourcedir}/icon.png %{buildroot}/usr/share/icons/hicolor/scalable/apps/${friendly_name}.png
          chmod 755 %{buildroot}/usr/bin/${name}
    
          %files
          %attr(755,root,root) /usr/bin/${name}
          %attr(644,root,root) /usr/share/applications/${desktop_file}
          %attr(644,root,root) /usr/share/icons/hicolor/scalable/apps/${friendly_name}.png
    
          %clean
          rm -rf %{buildroot}
    
          %changelog
          * $(date '+%a %b %d %Y') NoMercy <support@nomercy.tv> - ${VERSION}-1
          - Initial package
          EOF
          }
            
          # Build packages
          create_rpm_package "nomercymediaserver" "NoMercy-MediaServer" "./output/NoMercyMediaServer-linux-x64" "NoMercy-MediaServer.desktop"
          create_rpm_package "nomercyupdater" "NoMercy-Updater" "./output/NoMercyUpdater-linux-x64" "NoMercy-Updater.desktop"
          create_rpm_package "nomercyapp" "NoMercy-App" "./output/NoMercyApp-linux-x64" "NoMercy-App.desktop"
          
          # Generate repo metadata
          createrepo_c packages/rpm
          
          # Import GPG private key for RPM signing
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          
          # Sign the repository metadata
          cd packages/rpm
          gpg --armor --detach-sig -o repodata/repomd.xml.asc repodata/repomd.xml
          cd ../../..

      - name: Build Arch Packages and Sign Database
        run: |
          VERSION=${{ needs.test.outputs.version }}

          # Function to create Arch package
          create_arch_package() {
            local name=$1
            local friendly_name=$2
            local bin_path=$3
            local desktop_file=$4

            # Create package info
            cat > "${name}.PKGINFO" << EOF
          pkgname = ${name}
          pkgver = ${VERSION}-1
          pkgdesc = ${friendly_name}
          url = https://nomercy.tv
          builddate = $(date +%s)
          size = $(du -b ${bin_path} | cut -f1)
          arch = x86_64
          license = custom
          depend = glibc
          EOF
          }

          # Build packages
          create_arch_package "nomercymediaserver" "NoMercy-MediaServer" "./output/NoMercyMediaServer-linux-x64" "NoMercy-MediaServer.desktop"
          create_arch_package "nomercyupdater" "NoMercy-Updater" "./output/NoMercyUpdater-linux-x64" "NoMercy-Updater.desktop"
          create_arch_package "nomercyapp" "NoMercy-App" "./output/NoMercyApp-linux-x64" "NoMercy-App.desktop"

          # Generate repo database
          cd packages/arch/pool/x86_64
          tar --use-compress-program=zstd -cf nomercy.db *.pkg.tar.zst

      - name: Create Public Key File
        run: |
          echo "${{ vars.GPG_PUBLIC_KEY }}" > packages/nomercy_repo.gpg.pub
          chmod 644 packages/nomercy_repo.gpg.pub

      - name: Configure Package Signing
        run: |
          # Import the GPG key
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import

          # Move to the correct directory
          cd packages/arch/pool/x86_64

          # Trust the key
          gpg --batch --yes --pinentry-mode loopback

          # Create pacman.conf
          cat > ../../pacman.conf << EOF
          [options]
          SigLevel = Optional TrustAll

          [nomercy]
          Server = https://repo.nomercy.tv/arch/pool/$arch
          SigLevel = Required
          EOF

          cd -

      - name: Export Public Key
        run: |
          gpg --armor --export "${{ vars.GPG_KEY_ID }}" > packages/nomercy_repo.gpg.pub
          chmod 644 packages/nomercy_repo.gpg.pub

      - name: Generate APT Repository Metadata and Sign
        run: |
          # Ensure complete directory structure exists
          mkdir -p packages/apt/dists/stable/main/binary-amd64
          chmod -R 755 packages/apt

          cd packages/apt

          # Remove any existing metadata files
          rm -rf dists/stable/main/binary-amd64/Packages*
          rm -f dists/stable/Release*

          # Generate package index
          dpkg-scanpackages --multiversion pool/ > dists/stable/main/binary-amd64/Packages
          gzip -k -f dists/stable/main/binary-amd64/Packages

          # Create Release file in proper location
          cd dists/stable
          cat > Release << EOF
          Origin: NoMercy Entertainment
          Label: NoMercy
          Suite: stable
          Codename: stable
          Version: 1.0
          Architectures: amd64
          Components: main
          Description: NoMercy Entertainment Repository
          Date: $(date -u '+%a, %d %b %Y %H:%M:%S UTC')
          SHA256:
          EOF

          # Calculate hashes from root of dists/stable
          cd .. # Move to dists directory
          for file in $(find stable/main -type f); do
            sha256=$(sha256sum "${file}" | cut -d' ' -f1)
            size=$(stat -c%s "${file}")
            echo " $sha256 $size ${file#stable/}" >> stable/Release
          done

          # Sign Release file in correct location
          cd stable
          gpg --batch --yes --clear-sign -o InRelease Release
          gpg --batch --yes --detach-sign --armor -o Release.gpg Release

          cd ../../../..

          # Verify final structure
          tree packages/apt
      
      - name: Generate Repository Index
        run: |
          VERSION=${{ needs.test.outputs.version }}

          # Function to get package versions
          get_versions() {
            local dir=$1
            local pattern=$2
            find "$dir" -name "$pattern" -printf '%f\n' | sort -V | tail -5
          }

          # Get versions for all packages
          MS_DEB_VERSIONS=$(get_versions packages/apt/pool/main/n/nomercymediaserver "*.deb")
          UP_DEB_VERSIONS=$(get_versions packages/apt/pool/main/n/nomercyupdater "*.deb")
          APP_DEB_VERSIONS=$(get_versions packages/apt/pool/main/n/nomercyapp "*.deb")

          MS_RPM_VERSIONS=$(get_versions packages/rpm/pool/x86_64 "nomercymediaserver-*.rpm")
          UP_RPM_VERSIONS=$(get_versions packages/rpm/pool/x86_64 "nomercyupdater-*.rpm")
          APP_RPM_VERSIONS=$(get_versions packages/rpm/pool/x86_64 "nomercyapp-*.rpm")

          MS_ARCH_VERSIONS=$(get_versions packages/arch/pool/x86_64 "nomercymediaserver-*.pkg.tar.zst")
          UP_ARCH_VERSIONS=$(get_versions packages/arch/pool/x86_64 "nomercyupdater-*.pkg.tar.zst")
          APP_ARCH_VERSIONS=$(get_versions packages/arch/pool/x86_64 "nomercyapp-*.pkg.tar.zst")

          cat > packages/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>NoMercy Repository</title>
          </head>
          <body>
            <h1>NoMercy Repository</h1>
            <h2>Ubuntu/Debian Installation</h2>
            <pre>
          # For latest version
          echo "deb [signed-by=/etc/apt/keyrings/nomercy-archive-keyring.gpg] https://repo.nomercy.tv/apt stable main" | sudo tee /etc/apt/sources.list.d/nomercy.list
          wget -O - https://repo.nomercy.tv/nomercy_repo.gpg.pub | sudo gpg --dearmor -o /etc/apt/keyrings/nomercy-archive-keyring.gpg
          sudo apt update
          sudo apt install nomercymediaserver nomercyupdater nomercyapp
          </pre>
            <h2>CentOS/RHEL/Fedora Installation</h2>
            <pre>
          # For latest version
          sudo dnf config-manager --add-repo https://repo.nomercy.tv/rpm/nomercy.repo
          sudo dnf install nomercymediaserver nomercyupdater nomercyapp
          </pre>
            <h2>Arch Linux Installation</h2>
            <pre>
          # For latest version
          echo "[nomercy]
          Server = https://repo.nomercy.tv/arch/pool/x86_64" | sudo tee /etc/pacman.d/nomercy-repo
          curl -o nomercy.gpg.pub https://repo.nomercy.tv/nomercy_repo.gpg.pub
          sudo pacman-key --add nomercy.gpg.pub
          sudo pacman-key --lsign-key 23F1B8BDEE7408FBB2401B66EBBAD4C5328D9E9B
          sudo pacman -Sy
          sudo pacman -S nomercymediaserver nomercyupdater nomercyapp
          </pre>
          </body>
          </html>
          EOF

      - name: Clean Up
        run: |
          rm -f ./packages/arch/pool/x86_64/nomercy.db

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./packages
          cname: repo.nomercy.tv
